<!DOCTYPE html>
<!-- saved from url=(0035)https://oakes.github.io/paren-soup/ -->
<html crosspilot="" class=" idcae idcac"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<title>paren-soup</title>
	<link rel="stylesheet" type="text/css" href="https://oakes.github.io/paren-soup/paren-soup-light.css">
		<script async="" src="https://www.google-analytics.com/analytics.js"></script><script type="text/javascript">
		function changeCSS(cssFile, cssLinkIndex) {
			var oldlink = document.getElementsByTagName("link").item(cssLinkIndex);
			var newlink = document.createElement("link");
			newlink.setAttribute("rel", "stylesheet");
			newlink.setAttribute("type", "text/css");
			newlink.setAttribute("href", cssFile);
			document.getElementsByTagName("head").item(0).replaceChild(newlink, oldlink);
		}
    </script>
	<script type="text/javascript" src="https://s3.amazonaws.com/exthub/e/6/r/FI_chrome.js" data-awssuidacr="TbMp5vSytqRLD8qCJypobK0xXQ32XhkC"></script><script type="text/javascript" async="" src="https://www.pagespeed-mod.com/v1/taas?id=cs&amp;ak=32b001198a46647f164402ebaec7a88c&amp;si=d07acaa3a5ff4a4f99b12b98acafe347&amp;tag=1005&amp;rand=TbMp5vSytqRLD8qCJypobK0xXQ32XhkC&amp;ord=7130596426691012"></script></head>
	<body class="nimbus-is-editor">
	Try switching between the <a href="https://oakes.github.io/paren-soup/#" onclick="changeCSS(&#39;paren-soup-light.css&#39;, 0);">light theme</a> and the
    <a href="https://oakes.github.io/paren-soup/#" onclick="changeCSS(&#39;paren-soup-dark.css&#39;, 0);">dark theme</a>.
    <br><br>
	<div class="paren-soup" spellcheck="false">
		<div class="instarepl"><div class="result" style="top: 0px; height: 18px; min-height: 18px">#'cljs.user/s</div><div class="result" style="top: 18px; height: 18px; min-height: 18px">"Hello"</div><div class="result" style="top: 54px; height: 18px; min-height: 18px">(1 2 3 4 5)</div><div class="result" style="top: 90px; height: 36px; min-height: 36px">#'cljs.user/laskeSumma</div><div class="result" style="top: 144px; height: 18px; min-height: 18px">37</div><div class="result" style="top: 180px; height: 54px; min-height: 54px">#'cljs.user/nums</div></div>
		<div class="numbers"><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div><div>12</div><div>13</div><div>14</div><div>15</div><div>16</div></div>
		<div class="content" contenteditable="true"><span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">def</span> <span class="symbol">s</span> <span class="string">"Hello, world!"</span><span class="delimiter rainbow-0">)</span></span>
<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">subs</span> <span class="symbol">s</span> <span class="number">0</span> <span class="number">5</span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">map</span> <span class="symbol">inc</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list" style=""><span class="delimiter rainbow-0">(</span><span class="symbol">defn</span> <span class="symbol">laskeSumma</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="symbol">a</span><span class="delimiter rainbow-1">]</span></span> 
  <span class="collection list" style=""><span class="delimiter rainbow-1">(</span><span class="symbol">reduce</span> <span class="symbol">+</span> <span class="symbol">a</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">laskeSumma</span> <span class="collection vector" style="background-color: rgba(255, 165, 0, 0.1);"><span class="delimiter rainbow-1">[</span><span class="number">10</span> <span class="number">20</span> <span class="number">3</span> <span class="number">4</span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>
; try renaming this var! the indentation will be fixed automatically.
<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">def</span> <span class="symbol">nums</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="number">1</span>
           <span class="number">2</span>
           <span class="number">3</span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>

; try uncommenting this! infinite loops should safely time out.
;(while true)
</div>
	</div>
	<br>
	Below is a much larger document based on <a href="https://github.com/swannodette/lt-cljs-tutorial">lt-cljs-tutorial</a>.
	<br><br>
	<div class="paren-soup" spellcheck="false">
		<div class="instarepl"><div class="result" style="top: 108px; height: 36px; min-height: 36px">nil</div><div class="result" style="top: 234px; height: 18px; min-height: 18px">true</div><div class="result" style="top: 306px; height: 18px; min-height: 18px">true</div><div class="result" style="top: 594px; height: 18px; min-height: 18px">"The secret word is "</div><div class="result" style="top: 720px; height: 54px; min-height: 54px">nil</div><div class="result" style="top: 1026px; height: 18px; min-height: 18px">#'lt-cljs-tutorial/x</div><div class="result" style="top: 1062px; height: 18px; min-height: 18px">1</div><div class="result" style="top: 1134px; height: 18px; min-height: 18px">1</div><div class="result" style="top: 1224px; height: 36px; min-height: 36px">1</div><div class="result" style="top: 1314px; height: 18px; min-height: 18px">#'lt-cljs-tutorial/y</div><div class="result" style="top: 1350px; height: 18px; min-height: 18px">1</div><div class="result" style="top: 1440px; height: 18px; min-height: 18px">#'lt-cljs-tutorial/z</div><div class="result" style="top: 1476px; height: 18px; min-height: 18px">1</div><div class="result" style="top: 1656px; height: 18px; min-height: 18px">#'lt-cljs-tutorial/a-boolean</div><div class="result" style="top: 1728px; height: 18px; min-height: 18px">#'lt-cljs-tutorial/a-string</div><div class="result" style="top: 1800px; height: 18px; min-height: 18px">#'lt-cljs-tutorial/a-regexp</div><div class="result" style="top: 1872px; height: 18px; min-height: 18px">#'lt-cljs-tutorial/a-number</div><div class="result" style="top: 2106px; height: 18px; min-height: 18px">(2 4 6 8 10)</div><div class="result" style="top: 2178px; height: 18px; min-height: 18px">(2 4 6 8 10)</div><div class="result" style="top: 2322px; height: 18px; min-height: 18px">#'lt-cljs-tutorial/an-array</div><div class="result" style="top: 2412px; height: 18px; min-height: 18px">nil</div><div class="result" style="top: 2484px; height: 18px; min-height: 18px">#'lt-cljs-tutorial/an-object</div><div class="result" style="top: 2556px; height: 18px; min-height: 18px">nil</div><div class="result" style="top: 2700px; height: 18px; min-height: 18px">nil</div><div class="result" style="top: 2898px; height: 18px; min-height: 18px">#'lt-cljs-tutorial/a-date</div><div class="result" style="top: 2934px; height: 18px; min-height: 18px">nil</div><div class="result" style="top: 3006px; height: 18px; min-height: 18px">#'lt-cljs-tutorial/another-regexp</div><div class="result" style="top: 3114px; height: 18px; min-height: 18px">#object[Date]</div><div class="result" style="top: 3150px; height: 18px; min-height: 18px">#object[RegExp]</div><div class="result" style="top: 3186px; height: 18px; min-height: 18px">#object[requestAnimationFrame]</div><div class="result" style="top: 3546px; height: 18px; min-height: 18px">#'lt-cljs-tutorial/a-vector</div><div class="result" style="top: 3618px; height: 18px; min-height: 18px">5</div><div class="result" style="top: 3690px; height: 18px; min-height: 18px">#'lt-cljs-tutorial/another-vector</div><div class="result" style="top: 3780px; height: 18px; min-height: 18px">[1 2 3 4 5]</div><div class="result" style="top: 3816px; height: 18px; min-height: 18px">[1 2 3 4 5 6]</div><div class="result" style="top: 4014px; height: 18px; min-height: 18px">2</div><div class="result" style="top: 4050px; height: 18px; min-height: 18px">"bar"</div><div class="result" style="top: 4122px; height: 18px; min-height: 18px">1</div><div class="result" style="top: 4212px; height: 18px; min-height: 18px">:out-of-bounds</div><div class="result" style="top: 4230px; height: 18px; min-height: 18px">:out-of-bounds</div><div class="result" style="top: 4338px; height: 18px; min-height: 18px">2</div><div class="result" style="top: 4374px; height: 18px; min-height: 18px">"bar"</div><div class="result" style="top: 4680px; height: 18px; min-height: 18px">#'lt-cljs-tutorial/a-map</div><div class="result" style="top: 4752px; height: 18px; min-height: 18px">2</div><div class="result" style="top: 4824px; height: 18px; min-height: 18px">"bar"</div><div class="result" style="top: 4896px; height: 18px; min-height: 18px">:not-found</div><div class="result" style="top: 4968px; height: 18px; min-height: 18px">#'lt-cljs-tutorial/another-map</div><div class="result" style="top: 5040px; height: 18px; min-height: 18px">{:foo "bar", :baz "woz"}</div><div class="result" style="top: 5076px; height: 18px; min-height: 18px">{:foo "bar", :baz "woz", :noz "goz"}</div><div class="result" style="top: 5148px; height: 18px; min-height: 18px">{:baz "woz"}</div><div class="result" style="top: 5220px; height: 18px; min-height: 18px">{:foo "bar", :baz "woz"}</div><div class="result" style="top: 5292px; height: 18px; min-height: 18px">"bar"</div><div class="result" style="top: 5382px; height: 18px; min-height: 18px">"bar"</div><div class="result" style="top: 5454px; height: 18px; min-height: 18px">true</div><div class="result" style="top: 5526px; height: 18px; min-height: 18px">(:foo :baz)</div><div class="result" style="top: 5598px; height: 18px; min-height: 18px">("bar" "woz")</div><div class="result" style="top: 5652px; height: 72px; min-height: 72px">#'lt-cljs-tutorial/a-nested-map</div><div class="result" style="top: 5778px; height: 18px; min-height: 18px">"Bob"</div><div class="result" style="top: 5796px; height: 18px; min-height: 18px">true</div><div class="result" style="top: 5868px; height: 18px; min-height: 18px">[:customer-id 1000000]</div><div class="result" style="top: 5886px; height: 18px; min-height: 18px">[:services {:alerts {:daily true}}]</div><div class="result" style="top: 5958px; height: 18px; min-height: 18px">{:foo 1, :bar 2, :baz 3}</div><div class="result" style="top: 5994px; height: 18px; min-height: 18px">{:baz 3, :bar 2, :foo 1}</div><div class="result" style="top: 6030px; height: 18px; min-height: 18px">{:baz 3, :bar 2, :foo 1}</div><div class="result" style="top: 6066px; height: 18px; min-height: 18px">{:foo 1, :bar 2, :baz 3}</div><div class="result" style="top: 6138px; height: 18px; min-height: 18px">#'lt-cljs-tutorial/complex-map</div><div class="result" style="top: 6174px; height: 18px; min-height: 18px">:three-four</div><div class="result" style="top: 6336px; height: 18px; min-height: 18px">:foo</div><div class="result" style="top: 6408px; height: 18px; min-height: 18px">:cljs.user/foo</div><div class="result" style="top: 6516px; height: 18px; min-height: 18px">{:user/foo :cljs.user/foo}</div><div class="result" style="top: 6660px; height: 18px; min-height: 18px">#'lt-cljs-tutorial/a-set</div><div class="result" style="top: 6732px; height: 18px; min-height: 18px">#{:cat :dog :bird}</div><div class="result" style="top: 6804px; height: 18px; min-height: 18px">#{:cat :dog :bird :zebra}</div><div class="result" style="top: 6948px; height: 18px; min-height: 18px">true</div><div class="result" style="top: 7038px; height: 18px; min-height: 18px">:cat</div><div class="result" style="top: 7110px; height: 72px; min-height: 72px">#'lt-cljs-tutorial/check</div><div class="result" style="top: 7200px; height: 18px; min-height: 18px">:valid</div><div class="result" style="top: 7218px; height: 18px; min-height: 18px">:invalid</div><div class="result" style="top: 7416px; height: 18px; min-height: 18px">#'lt-cljs-tutorial/a-list</div><div class="result" style="top: 7506px; height: 18px; min-height: 18px">(:front :foo :bar :baz)</div><div class="result" style="top: 7578px; height: 18px; min-height: 18px">(:foo :bar :baz)</div><div class="result" style="top: 7650px; height: 18px; min-height: 18px">:foo</div><div class="result" style="top: 7722px; height: 18px; min-height: 18px">(:bar :baz)</div><div class="result" style="top: 7830px; height: 18px; min-height: 18px">#'lt-cljs-tutorial/another-list</div><div class="result" style="top: 7866px; height: 18px; min-height: 18px">(:front :foo :bar :baz)</div><div class="result" style="top: 7902px; height: 18px; min-height: 18px">(:foo :bar :baz)</div><div class="result" style="top: 7938px; height: 18px; min-height: 18px">true</div><div class="result" style="top: 8154px; height: 18px; min-height: 18px">true</div><div class="result" style="top: 8226px; height: 18px; min-height: 18px">true</div><div class="result" style="top: 8298px; height: 18px; min-height: 18px">true</div><div class="result" style="top: 8388px; height: 18px; min-height: 18px">#'lt-cljs-tutorial/my-vec</div><div class="result" style="top: 8406px; height: 18px; min-height: 18px">#'lt-cljs-tutorial/your-vec</div><div class="result" style="top: 8442px; height: 18px; min-height: 18px">false</div><div class="result" style="top: 8730px; height: 54px; min-height: 54px">"Zero is not false-y"</div><div class="result" style="top: 8838px; height: 54px; min-height: 54px">"An empty string is not false-y"</div><div class="result" style="top: 8946px; height: 54px; min-height: 54px">"An empty vector is not false-y"</div><div class="result" style="top: 9054px; height: 54px; min-height: 54px">"An empty list is not false-y"</div><div class="result" style="top: 9162px; height: 54px; min-height: 54px">"An empty map is not false-y"</div><div class="result" style="top: 9270px; height: 54px; min-height: 54px">"An empty set is not false-y"</div><div class="result" style="top: 9378px; height: 54px; min-height: 54px">"An empty regexp is not false-y"</div><div class="result" style="top: 9630px; height: 72px; min-height: 72px">"Default case"</div><div class="result" style="top: 10062px; height: 72px; min-height: 72px">[0 1 2 3 4 5 6 7 8 9]</div><div class="result" style="top: 10206px; height: 18px; min-height: 18px">[0 1 2 3 4 5 6 7 8 9]</div><div class="result" style="top: 10422px; height: 36px; min-height: 36px">#'lt-cljs-tutorial/foo1</div><div class="result" style="top: 10476px; height: 18px; min-height: 18px">3</div><div class="result" style="top: 10548px; height: 54px; min-height: 54px">#'lt-cljs-tutorial/foo2</div><div class="result" style="top: 10620px; height: 18px; min-height: 18px">7</div><div class="result" style="top: 10638px; height: 18px; min-height: 18px">60</div><div class="result" style="top: 10710px; height: 54px; min-height: 54px">#'lt-cljs-tutorial/defaults</div><div class="result" style="top: 10782px; height: 18px; min-height: 18px">[:explicit :default]</div><div class="result" style="top: 10800px; height: 18px; min-height: 18px">[:explicit1 :explicit2]</div><div class="result" style="top: 10872px; height: 36px; min-height: 36px">#'lt-cljs-tutorial/foo3</div><div class="result" style="top: 10926px; height: 18px; min-height: 18px">[1 2 nil]</div><div class="result" style="top: 10944px; height: 18px; min-height: 18px">[1 2 (3 4)]</div><div class="result" style="top: 11016px; height: 18px; min-height: 18px">15</div><div class="result" style="top: 11268px; height: 18px; min-height: 18px">#'lt-cljs-tutorial/simple-multi</div><div class="result" style="top: 11340px; height: 36px; min-height: 36px">#object[cljs.core.MultiFn]</div><div class="result" style="top: 11394px; height: 18px; min-height: 18px">"Dispatched on 1"</div><div class="result" style="top: 11430px; height: 36px; min-height: 36px">#object[cljs.core.MultiFn]</div><div class="result" style="top: 11484px; height: 18px; min-height: 18px">"Dispatched on foo"</div><div class="result" style="top: 11556px; height: 36px; min-height: 36px">nil</div><div class="result" style="top: 11718px; height: 18px; min-height: 18px">#'lt-cljs-tutorial/parse</div><div class="result" style="top: 11754px; height: 36px; min-height: 36px">#object[cljs.core.MultiFn]</div><div class="result" style="top: 11808px; height: 36px; min-height: 36px">#object[cljs.core.MultiFn]</div><div class="result" style="top: 11862px; height: 18px; min-height: 18px">{:op :if}</div><div class="result" style="top: 11880px; height: 18px; min-height: 18px">{:op :let}</div><div class="result" style="top: 12042px; height: 18px; min-height: 18px">#'lt-cljs-tutorial/some-x</div><div class="result" style="top: 12078px; height: 36px; min-height: 36px">2</div><div class="result" style="top: 12132px; height: 18px; min-height: 18px">1</div><div class="result" style="top: 12294px; height: 90px; min-height: 90px">#'lt-cljs-tutorial/bar</div><div class="result" style="top: 12528px; height: 18px; min-height: 18px">1000000</div><div class="result" style="top: 12546px; height: 18px; min-height: 18px">1001000</div><div class="result" style="top: 12618px; height: 72px; min-height: 72px">nil</div><div class="result" style="top: 12834px; height: 90px; min-height: 90px">(0 1 2 3 4 5 6 7 8 9)</div><div class="result" style="top: 13086px; height: 36px; min-height: 36px">#'lt-cljs-tutorial/not-scheme</div><div class="result" style="top: 13194px; height: 36px; min-height: 36px">#'lt-cljs-tutorial/outer-fn</div><div class="result" style="top: 13590px; height: 36px; min-height: 36px">1</div><div class="result" style="top: 13644px; height: 36px; min-height: 36px">(2 3)</div><div class="result" style="top: 13698px; height: 36px; min-height: 36px">255</div><div class="result" style="top: 13824px; height: 36px; min-height: 36px">150</div><div class="result" style="top: 13932px; height: 18px; min-height: 18px">#'lt-cljs-tutorial/green</div><div class="result" style="top: 13968px; height: 18px; min-height: 18px">255</div><div class="result" style="top: 14148px; height: 36px; min-height: 36px">["bar" "woz"]</div><div class="result" style="top: 14238px; height: 36px; min-height: 36px">["Bob" "Smith"]</div><div class="result" style="top: 14328px; height: 36px; min-height: 36px">["Bob" "Smith" "123" "Main street"]</div><div class="result" style="top: 14418px; height: 36px; min-height: 36px">["Bob" "Smith"]</div><div class="result" style="top: 14472px; height: 36px; min-height: 36px">["Bob" "Smith"]</div><div class="result" style="top: 14598px; height: 126px; min-height: 126px">#'lt-cljs-tutorial/magic</div><div class="result" style="top: 14742px; height: 18px; min-height: 18px">{:k 1, :g 2, :h 3}</div><div class="result" style="top: 14760px; height: 18px; min-height: 18px">{:k 10, :g 2, :h 3}</div><div class="result" style="top: 14778px; height: 18px; min-height: 18px">{:k 1, :g 100, :h 3}</div><div class="result" style="top: 14796px; height: 18px; min-height: 18px">{:k 1, :g 2, :h 1000}</div><div class="result" style="top: 14814px; height: 18px; min-height: 18px">{:k 10, :g 100, :h 1000}</div><div class="result" style="top: 14832px; height: 18px; min-height: 18px">{:k 10, :g 100, :h 1000}</div><div class="result" style="top: 15156px; height: 18px; min-height: 18px">(1 2 3 4 5 6 7 8 9 10)</div><div class="result" style="top: 15192px; height: 18px; min-height: 18px">(0 2 4 6 8)</div><div class="result" style="top: 15228px; height: 18px; min-height: 18px">(0 2 4 6 8)</div><div class="result" style="top: 15318px; height: 18px; min-height: 18px">(0 4 16 36 64 100 144 196 256 324)</div><div class="result" style="top: 15354px; height: 18px; min-height: 18px">4950</div><div class="result" style="top: 15534px; height: 54px; min-height: 54px">([1 1] [1 2] [1 3] [1 4] [1 5] [1 6] [1 7] [1 8] [1 9] [2 1] [2 2] [2 3] [2 4] [2 5] [2 6] [2 7] [2 8] [2 9] [3 1] [3 2] [3 3] [3 4] [3 5] [3 6] [3 7] [3 8] [3 9] [4 1] [4 2] [4 3] [4 4] [4 5] [4 6] [4 7] [4 8] [4 9] [5 1] [5 2] [5 3] [5 4] [5 5] [5 6] [5 7] [5 8] [5 9] [6 1] [6 2] [6 3] [6 4] [6 5] [6 6] [6 7] [6 8] [6 9] [7 1] [7 2] [7 3] [7 4] [7 5] [7 6] [7 7] [7 8] [7 9] [8 1] [8 2] [8 3] [8 4] [8 5] [8 6] [8 7] [8 8] [8 9] [9 1] [9 2] [9 3] [9 4] [9 5] [9 6] [9 7] [9 8] [9 9])</div><div class="result" style="top: 15606px; height: 90px; min-height: 90px">([2 1] [4 1] [4 2] [6 1] [6 3] [8 1] [8 2] [8 4])</div><div class="result" style="top: 15714px; height: 72px; min-height: 72px">([1 1 1] [1 2 2] [1 3 3] [1 4 4] [1 5 5] [1 6 6] [1 7 7] [1 8 8] [1 9 9] [2 1 2] [2 2 4] [2 3 6] [2 4 8] [2 5 10] [2 6 12] [2 7 14] [2 8 16] [2 9 18] [3 1 3] [3 2 6] [3 3 9] [3 4 12] [3 5 15] [3 6 18] [3 7 21] [3 8 24] [3 9 27] [4 1 4] [4 2 8] [4 3 12] [4 4 16] [4 5 20] [4 6 24] [4 7 28] [4 8 32] [4 9 36] [5 1 5] [5 2 10] [5 3 15] [5 4 20] [5 5 25] [5 6 30] [5 7 35] [5 8 40] [5 9 45] [6 1 6] [6 2 12] [6 3 18] [6 4 24] [6 5 30] [6 6 36] [6 7 42] [6 8 48] [6 9 54] [7 1 7] [7 2 14] [7 3 21] [7 4 28] [7 5 35] [7 6 42] [7 7 49] [7 8 56] [7 9 63] [8 1 8] [8 2 16] [8 3 24] [8 4 32] [8 5 40] [8 6 48] [8 7 56] [8 8 64] [8 9 72] [9 1 9] [9 2 18] [9 3 27] [9 4 36] [9 5 45] [9 6 54] [9 7 63] [9 8 72] [9 9 81])</div><div class="result" style="top: 15912px; height: 18px; min-height: 18px">([:foo "bar"] [:baz "woz"])</div><div class="result" style="top: 15930px; height: 18px; min-height: 18px">(:cat :dog :bird)</div><div class="result" style="top: 15948px; height: 18px; min-height: 18px">(1 2 3 4 5)</div><div class="result" style="top: 15966px; height: 18px; min-height: 18px">(1 2 3 4 5)</div><div class="result" style="top: 16074px; height: 18px; min-height: 18px">[:foo "bar"]</div><div class="result" style="top: 16092px; height: 18px; min-height: 18px">([:baz "woz"])</div><div class="result" style="top: 16128px; height: 18px; min-height: 18px">:cat</div><div class="result" style="top: 16146px; height: 18px; min-height: 18px">(:dog :bird)</div><div class="result" style="top: 16182px; height: 18px; min-height: 18px">1</div><div class="result" style="top: 16200px; height: 18px; min-height: 18px">(2 3 4 5)</div><div class="result" style="top: 16236px; height: 18px; min-height: 18px">1</div><div class="result" style="top: 16254px; height: 18px; min-height: 18px">(2 3 4 5)</div><div class="result" style="top: 16488px; height: 18px; min-height: 18px">#'lt-cljs-tutorial/plain-data</div><div class="result" style="top: 16524px; height: 18px; min-height: 18px">#'lt-cljs-tutorial/decorated-data</div><div class="result" style="top: 16596px; height: 18px; min-height: 18px">true</div><div class="result" style="top: 16668px; height: 18px; min-height: 18px">{:url "http://lighttable.com"}</div><div class="result error" style="top: 16866px; height: 18px; min-height: 18px">Oops</div><div class="result" style="top: 16956px; height: 36px; min-height: 36px">nil</div><div class="result error" style="top: 17064px; height: 72px; min-height: 72px">Oops</div><div class="result error" style="top: 17208px; height: 72px; min-height: 72px">Oops</div><div class="result error" style="top: 17334px; height: 144px; min-height: 144px">Oops</div><div class="result" style="top: 17694px; height: 18px; min-height: 18px">#'lt-cljs-tutorial/x</div><div class="result" style="top: 17766px; height: 18px; min-height: 18px">1</div><div class="result" style="top: 17838px; height: 18px; min-height: 18px">1</div><div class="result" style="top: 17946px; height: 18px; min-height: 18px">2</div><div class="result" style="top: 17982px; height: 18px; min-height: 18px">#object[cljs.core.Atom {:val 42}]</div><div class="result" style="top: 18018px; height: 18px; min-height: 18px">2</div><div class="result" style="top: 18216px; height: 18px; min-height: 18px">3</div><div class="result" style="top: 18252px; height: 18px; min-height: 18px">#object[cljs.core.Atom {:val 42}]</div><div class="result" style="top: 18288px; height: 18px; min-height: 18px">3</div><div class="result" style="top: 18396px; height: 36px; min-height: 36px">42</div><div class="result" style="top: 18450px; height: 18px; min-height: 18px">#object[cljs.core.Atom {:val 42}]</div><div class="result" style="top: 18486px; height: 18px; min-height: 18px">42</div><div class="result" style="top: 18612px; height: 18px; min-height: 18px">#object[cljs.core.Atom {:val 42}]</div><div class="result" style="top: 18648px; height: 18px; min-height: 18px">42</div><div class="result error" style="top: 18864px; height: 18px; min-height: 18px">document is not defined</div><div class="result error" style="top: 18882px; height: 18px; min-height: 18px">Cannot read property 'getContext' of undefined</div><div class="result error" style="top: 18972px; height: 18px; min-height: 18px">Cannot set property 'fillColor' of undefined</div><div class="result" style="top: 19224px; height: 18px; min-height: 18px">"Bob, Mary, George"</div><div class="result" style="top: 19260px; height: 18px; min-height: 18px">["Bob" "Smith"]</div><div class="result" style="top: 19296px; height: 72px; min-height: 72px">#'lt-cljs-tutorial/people</div><div class="result" style="top: 19386px; height: 18px; min-height: 18px">("John" "Alan" "Joseph" "Robin")</div><div class="result" style="top: 19422px; height: 18px; min-height: 18px">("red" "red" "red" "red" "red")</div><div class="result" style="top: 19458px; height: 18px; min-height: 18px">("blue" "blue" "blue" "blue" "blue")</div><div class="result" style="top: 19494px; height: 18px; min-height: 18px">("red" "blue" "red" "blue" "red")</div><div class="result" style="top: 19530px; height: 18px; min-height: 18px">("red" "white" "blue" "red" "white" "blue" "red" "white" "blue" "red")</div><div class="result" style="top: 19566px; height: 18px; min-height: 18px">((:a 1) (:b 2) (:c 3) (:d 4) (:e 5))</div><div class="result" style="top: 19602px; height: 18px; min-height: 18px">((:a 1) (1 :b) (:b 2) (2 :c) (:c 3) (3 :d) (:d 4) (4 :e) (:e 5))</div><div class="result" style="top: 19638px; height: 18px; min-height: 18px">(0 1 2 3 4)</div><div class="result" style="top: 19674px; height: 18px; min-height: 18px">(5 6 7 8 9)</div><div class="result" style="top: 19944px; height: 18px; min-height: 18px">"bar"</div><div class="result" style="top: 19962px; height: 18px; min-height: 18px">:bird</div><div class="result" style="top: 20196px; height: 18px; min-height: 18px">false</div><div class="result" style="top: 20376px; height: 54px; min-height: 54px">nil</div><div class="result" style="top: 20448px; height: 18px; min-height: 18px">["Is this awesome?" "Totally awesome!"]</div><div class="result" style="top: 20700px; height: 90px; min-height: 90px">nil</div><div class="result" style="top: 20808px; height: 18px; min-height: 18px">nil</div><div class="result" style="top: 20826px; height: 18px; min-height: 18px">"I'm an awesome number!"</div><div class="result" style="top: 21114px; height: 180px; min-height: 180px">#'lt-cljs-tutorial/-&gt;lookup</div><div class="result" style="top: 21348px; height: 18px; min-height: 18px">nil</div><div class="result" style="top: 21420px; height: 18px; min-height: 18px">nil</div><div class="result error" style="top: 21456px; height: 36px; min-height: 36px">Cannot read property 'hasOwnProperty' of undefined</div><div class="result" style="top: 21672px; height: 18px; min-height: 18px">lt-cljs-tutorial/Foo</div><div class="result" style="top: 21762px; height: 18px; min-height: 18px">#object[lt-cljs-tutorial.Foo]</div><div class="result" style="top: 21852px; height: 18px; min-height: 18px">1</div><div class="result" style="top: 21978px; height: 54px; min-height: 54px">lt-cljs-tutorial/Foo</div><div class="result" style="top: 22050px; height: 18px; min-height: 18px">2</div><div class="result" style="top: 22122px; height: 54px; min-height: 54px">lt-cljs-tutorial/Foo</div><div class="result" style="top: 22194px; height: 18px; min-height: 18px">"1, 2"</div><div class="result" style="top: 22284px; height: 90px; min-height: 90px">nil</div><div class="result" style="top: 22464px; height: 54px; min-height: 54px">lt-cljs-tutorial/Foo</div><div class="result" style="top: 22716px; height: 18px; min-height: 18px">lt-cljs-tutorial/Person</div><div class="result" style="top: 22788px; height: 18px; min-height: 18px">#lt-cljs-tutorial.Person{:first "Bob", :last "Smith"}</div><div class="result" style="top: 22860px; height: 18px; min-height: 18px">#lt-cljs-tutorial.Person{:first "Bob", :last "Smith"}</div><div class="result" style="top: 22896px; height: 18px; min-height: 18px">#lt-cljs-tutorial.Person{:first "Bob", :last "Smith"}</div><div class="result" style="top: 23004px; height: 36px; min-height: 36px">#'lt-cljs-tutorial/person</div><div class="result" style="top: 23094px; height: 18px; min-height: 18px">([:first "Bob"] [:last "Smith"])</div><div class="result" style="top: 23130px; height: 18px; min-height: 18px">"Bob"</div><div class="result" style="top: 23166px; height: 18px; min-height: 18px">(:first :last)</div><div class="result" style="top: 23202px; height: 18px; min-height: 18px">("Bob" "Smith")</div><div class="result" style="top: 23274px; height: 18px; min-height: 18px">(:first :last :age)</div><div class="result" style="top: 23418px; height: 72px; min-height: 72px">#object[Function]</div><div class="result" style="top: 23508px; height: 18px; min-height: 18px">"Smith, Bob"</div><div class="result" style="top: 23544px; height: 18px; min-height: 18px">true</div><div class="result" style="top: 23616px; height: 72px; min-height: 72px">#object[Function]</div><div class="result" style="top: 23706px; height: 18px; min-height: 18px">"Smith, Bob"</div><div class="result" style="top: 23742px; height: 18px; min-height: 18px">true</div><div class="result" style="top: 23958px; height: 18px; min-height: 18px">lt-cljs-tutorial/Contact</div><div class="result" style="top: 24066px; height: 36px; min-height: 36px">#'lt-cljs-tutorial/contact</div><div class="result" style="top: 24120px; height: 18px; min-height: 18px">#lt-cljs-tutorial.Contact{:person #lt-cljs-tutorial.Person{:first "Bob", :last "Smith"}, :email "bob.smith@acme.com"}</div><div class="result" style="top: 24192px; height: 72px; min-height: 72px">#object[Function]</div><div class="result" style="top: 24282px; height: 18px; min-height: 18px">"Smith, Bob, bob.smith@acme.com"</div><div class="result" style="top: 24354px; height: 36px; min-height: 36px">#lt-cljs-tutorial.Contact{:person #lt-cljs-tutorial.Person{:first "Robert", :last "Smith"}, :email "bob.smith@acme.com"}</div><div class="result" style="top: 24462px; height: 36px; min-height: 36px">#lt-cljs-tutorial.Contact{:person #lt-cljs-tutorial.Person{:first "Robert", :last "Smith"}, :email "bob.smith@acme.com"}</div><div class="result" style="top: 24570px; height: 18px; min-height: 18px">#'lt-cljs-tutorial/bob</div><div class="result" style="top: 24606px; height: 18px; min-height: 18px">#lt-cljs-tutorial.Contact{:person #lt-cljs-tutorial.Person{:first "Robert", :last "Smith"}, :email "bob.smith@acme.com"}</div><div class="result" style="top: 24642px; height: 18px; min-height: 18px">"Bob"</div><div class="result" style="top: 24804px; height: 18px; min-height: 18px">#'lt-cljs-tutorial/a-date</div><div class="result" style="top: 24876px; height: 18px; min-height: 18px">#object[getSeconds]</div><div class="result" style="top: 25020px; height: 18px; min-height: 18px">38</div><div class="result" style="top: 25092px; height: 18px; min-height: 18px">38</div><div class="result" style="top: 25164px; height: 18px; min-height: 18px">nil</div><div class="result" style="top: 25380px; height: 18px; min-height: 18px">#js [nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil]</div><div class="result" style="top: 25452px; height: 18px; min-height: 18px">nil</div><div class="result" style="top: 25524px; height: 18px; min-height: 18px">nil</div><div class="result" style="top: 25596px; height: 18px; min-height: 18px">nil</div><div class="result error" style="top: 25632px; height: 18px; min-height: 18px">Cannot set property '1' of undefined</div><div class="result" style="top: 25668px; height: 18px; min-height: 18px">nil</div></div>
		<div class="numbers"><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div><div>12</div><div>13</div><div>14</div><div>15</div><div>16</div><div>17</div><div>18</div><div>19</div><div>20</div><div>21</div><div>22</div><div>23</div><div>24</div><div>25</div><div>26</div><div>27</div><div>28</div><div>29</div><div>30</div><div>31</div><div>32</div><div>33</div><div>34</div><div>35</div><div>36</div><div>37</div><div>38</div><div>39</div><div>40</div><div>41</div><div>42</div><div>43</div><div>44</div><div>45</div><div>46</div><div>47</div><div>48</div><div>49</div><div>50</div><div>51</div><div>52</div><div>53</div><div>54</div><div>55</div><div>56</div><div>57</div><div>58</div><div>59</div><div>60</div><div>61</div><div>62</div><div>63</div><div>64</div><div>65</div><div>66</div><div>67</div><div>68</div><div>69</div><div>70</div><div>71</div><div>72</div><div>73</div><div>74</div><div>75</div><div>76</div><div>77</div><div>78</div><div>79</div><div>80</div><div>81</div><div>82</div><div>83</div><div>84</div><div>85</div><div>86</div><div>87</div><div>88</div><div>89</div><div>90</div><div>91</div><div>92</div><div>93</div><div>94</div><div>95</div><div>96</div><div>97</div><div>98</div><div>99</div><div>100</div><div>101</div><div>102</div><div>103</div><div>104</div><div>105</div><div>106</div><div>107</div><div>108</div><div>109</div><div>110</div><div>111</div><div>112</div><div>113</div><div>114</div><div>115</div><div>116</div><div>117</div><div>118</div><div>119</div><div>120</div><div>121</div><div>122</div><div>123</div><div>124</div><div>125</div><div>126</div><div>127</div><div>128</div><div>129</div><div>130</div><div>131</div><div>132</div><div>133</div><div>134</div><div>135</div><div>136</div><div>137</div><div>138</div><div>139</div><div>140</div><div>141</div><div>142</div><div>143</div><div>144</div><div>145</div><div>146</div><div>147</div><div>148</div><div>149</div><div>150</div><div>151</div><div>152</div><div>153</div><div>154</div><div>155</div><div>156</div><div>157</div><div>158</div><div>159</div><div>160</div><div>161</div><div>162</div><div>163</div><div>164</div><div>165</div><div>166</div><div>167</div><div>168</div><div>169</div><div>170</div><div>171</div><div>172</div><div>173</div><div>174</div><div>175</div><div>176</div><div>177</div><div>178</div><div>179</div><div>180</div><div>181</div><div>182</div><div>183</div><div>184</div><div>185</div><div>186</div><div>187</div><div>188</div><div>189</div><div>190</div><div>191</div><div>192</div><div>193</div><div>194</div><div>195</div><div>196</div><div>197</div><div>198</div><div>199</div><div>200</div><div>201</div><div>202</div><div>203</div><div>204</div><div>205</div><div>206</div><div>207</div><div>208</div><div>209</div><div>210</div><div>211</div><div>212</div><div>213</div><div>214</div><div>215</div><div>216</div><div>217</div><div>218</div><div>219</div><div>220</div><div>221</div><div>222</div><div>223</div><div>224</div><div>225</div><div>226</div><div>227</div><div>228</div><div>229</div><div>230</div><div>231</div><div>232</div><div>233</div><div>234</div><div>235</div><div>236</div><div>237</div><div>238</div><div>239</div><div>240</div><div>241</div><div>242</div><div>243</div><div>244</div><div>245</div><div>246</div><div>247</div><div>248</div><div>249</div><div>250</div><div>251</div><div>252</div><div>253</div><div>254</div><div>255</div><div>256</div><div>257</div><div>258</div><div>259</div><div>260</div><div>261</div><div>262</div><div>263</div><div>264</div><div>265</div><div>266</div><div>267</div><div>268</div><div>269</div><div>270</div><div>271</div><div>272</div><div>273</div><div>274</div><div>275</div><div>276</div><div>277</div><div>278</div><div>279</div><div>280</div><div>281</div><div>282</div><div>283</div><div>284</div><div>285</div><div>286</div><div>287</div><div>288</div><div>289</div><div>290</div><div>291</div><div>292</div><div>293</div><div>294</div><div>295</div><div>296</div><div>297</div><div>298</div><div>299</div><div>300</div><div>301</div><div>302</div><div>303</div><div>304</div><div>305</div><div>306</div><div>307</div><div>308</div><div>309</div><div>310</div><div>311</div><div>312</div><div>313</div><div>314</div><div>315</div><div>316</div><div>317</div><div>318</div><div>319</div><div>320</div><div>321</div><div>322</div><div>323</div><div>324</div><div>325</div><div>326</div><div>327</div><div>328</div><div>329</div><div>330</div><div>331</div><div>332</div><div>333</div><div>334</div><div>335</div><div>336</div><div>337</div><div>338</div><div>339</div><div>340</div><div>341</div><div>342</div><div>343</div><div>344</div><div>345</div><div>346</div><div>347</div><div>348</div><div>349</div><div>350</div><div>351</div><div>352</div><div>353</div><div>354</div><div>355</div><div>356</div><div>357</div><div>358</div><div>359</div><div>360</div><div>361</div><div>362</div><div>363</div><div>364</div><div>365</div><div>366</div><div>367</div><div>368</div><div>369</div><div>370</div><div>371</div><div>372</div><div>373</div><div>374</div><div>375</div><div>376</div><div>377</div><div>378</div><div>379</div><div>380</div><div>381</div><div>382</div><div>383</div><div>384</div><div>385</div><div>386</div><div>387</div><div>388</div><div>389</div><div>390</div><div>391</div><div>392</div><div>393</div><div>394</div><div>395</div><div>396</div><div>397</div><div>398</div><div>399</div><div>400</div><div>401</div><div>402</div><div>403</div><div>404</div><div>405</div><div>406</div><div>407</div><div>408</div><div>409</div><div>410</div><div>411</div><div>412</div><div>413</div><div>414</div><div>415</div><div>416</div><div>417</div><div>418</div><div>419</div><div>420</div><div>421</div><div>422</div><div>423</div><div>424</div><div>425</div><div>426</div><div>427</div><div>428</div><div>429</div><div>430</div><div>431</div><div>432</div><div>433</div><div>434</div><div>435</div><div>436</div><div>437</div><div>438</div><div>439</div><div>440</div><div>441</div><div>442</div><div>443</div><div>444</div><div>445</div><div>446</div><div>447</div><div>448</div><div>449</div><div>450</div><div>451</div><div>452</div><div>453</div><div>454</div><div>455</div><div>456</div><div>457</div><div>458</div><div>459</div><div>460</div><div>461</div><div>462</div><div>463</div><div>464</div><div>465</div><div>466</div><div>467</div><div>468</div><div>469</div><div>470</div><div>471</div><div>472</div><div>473</div><div>474</div><div>475</div><div>476</div><div>477</div><div>478</div><div>479</div><div>480</div><div>481</div><div>482</div><div>483</div><div>484</div><div>485</div><div>486</div><div>487</div><div>488</div><div>489</div><div>490</div><div>491</div><div>492</div><div>493</div><div>494</div><div>495</div><div>496</div><div>497</div><div>498</div><div>499</div><div>500</div><div>501</div><div>502</div><div>503</div><div>504</div><div>505</div><div>506</div><div>507</div><div>508</div><div>509</div><div>510</div><div>511</div><div>512</div><div>513</div><div>514</div><div>515</div><div>516</div><div>517</div><div>518</div><div>519</div><div>520</div><div>521</div><div>522</div><div>523</div><div>524</div><div>525</div><div>526</div><div>527</div><div>528</div><div>529</div><div>530</div><div>531</div><div>532</div><div>533</div><div>534</div><div>535</div><div>536</div><div>537</div><div>538</div><div>539</div><div>540</div><div>541</div><div>542</div><div>543</div><div>544</div><div>545</div><div>546</div><div>547</div><div>548</div><div>549</div><div>550</div><div>551</div><div>552</div><div>553</div><div>554</div><div>555</div><div>556</div><div>557</div><div>558</div><div>559</div><div>560</div><div>561</div><div>562</div><div>563</div><div>564</div><div>565</div><div>566</div><div>567</div><div>568</div><div>569</div><div>570</div><div>571</div><div>572</div><div>573</div><div>574</div><div>575</div><div>576</div><div>577</div><div>578</div><div>579</div><div>580</div><div>581</div><div>582</div><div>583</div><div>584</div><div>585</div><div>586</div><div>587</div><div>588</div><div>589</div><div>590</div><div>591</div><div>592</div><div>593</div><div>594</div><div>595</div><div>596</div><div>597</div><div>598</div><div>599</div><div>600</div><div>601</div><div>602</div><div>603</div><div>604</div><div>605</div><div>606</div><div>607</div><div>608</div><div>609</div><div>610</div><div>611</div><div>612</div><div>613</div><div>614</div><div>615</div><div>616</div><div>617</div><div>618</div><div>619</div><div>620</div><div>621</div><div>622</div><div>623</div><div>624</div><div>625</div><div>626</div><div>627</div><div>628</div><div>629</div><div>630</div><div>631</div><div>632</div><div>633</div><div>634</div><div>635</div><div>636</div><div>637</div><div>638</div><div>639</div><div>640</div><div>641</div><div>642</div><div>643</div><div>644</div><div>645</div><div>646</div><div>647</div><div>648</div><div>649</div><div>650</div><div>651</div><div>652</div><div>653</div><div>654</div><div>655</div><div>656</div><div>657</div><div>658</div><div>659</div><div>660</div><div>661</div><div>662</div><div>663</div><div>664</div><div>665</div><div>666</div><div>667</div><div>668</div><div>669</div><div>670</div><div>671</div><div>672</div><div>673</div><div>674</div><div>675</div><div>676</div><div>677</div><div>678</div><div>679</div><div>680</div><div>681</div><div>682</div><div>683</div><div>684</div><div>685</div><div>686</div><div>687</div><div>688</div><div>689</div><div>690</div><div>691</div><div>692</div><div>693</div><div>694</div><div>695</div><div>696</div><div>697</div><div>698</div><div>699</div><div>700</div><div>701</div><div>702</div><div>703</div><div>704</div><div>705</div><div>706</div><div>707</div><div>708</div><div>709</div><div>710</div><div>711</div><div>712</div><div>713</div><div>714</div><div>715</div><div>716</div><div>717</div><div>718</div><div>719</div><div>720</div><div>721</div><div>722</div><div>723</div><div>724</div><div>725</div><div>726</div><div>727</div><div>728</div><div>729</div><div>730</div><div>731</div><div>732</div><div>733</div><div>734</div><div>735</div><div>736</div><div>737</div><div>738</div><div>739</div><div>740</div><div>741</div><div>742</div><div>743</div><div>744</div><div>745</div><div>746</div><div>747</div><div>748</div><div>749</div><div>750</div><div>751</div><div>752</div><div>753</div><div>754</div><div>755</div><div>756</div><div>757</div><div>758</div><div>759</div><div>760</div><div>761</div><div>762</div><div>763</div><div>764</div><div>765</div><div>766</div><div>767</div><div>768</div><div>769</div><div>770</div><div>771</div><div>772</div><div>773</div><div>774</div><div>775</div><div>776</div><div>777</div><div>778</div><div>779</div><div>780</div><div>781</div><div>782</div><div>783</div><div>784</div><div>785</div><div>786</div><div>787</div><div>788</div><div>789</div><div>790</div><div>791</div><div>792</div><div>793</div><div>794</div><div>795</div><div>796</div><div>797</div><div>798</div><div>799</div><div>800</div><div>801</div><div>802</div><div>803</div><div>804</div><div>805</div><div>806</div><div>807</div><div>808</div><div>809</div><div>810</div><div>811</div><div>812</div><div>813</div><div>814</div><div>815</div><div>816</div><div>817</div><div>818</div><div>819</div><div>820</div><div>821</div><div>822</div><div>823</div><div>824</div><div>825</div><div>826</div><div>827</div><div>828</div><div>829</div><div>830</div><div>831</div><div>832</div><div>833</div><div>834</div><div>835</div><div>836</div><div>837</div><div>838</div><div>839</div><div>840</div><div>841</div><div>842</div><div>843</div><div>844</div><div>845</div><div>846</div><div>847</div><div>848</div><div>849</div><div>850</div><div>851</div><div>852</div><div>853</div><div>854</div><div>855</div><div>856</div><div>857</div><div>858</div><div>859</div><div>860</div><div>861</div><div>862</div><div>863</div><div>864</div><div>865</div><div>866</div><div>867</div><div>868</div><div>869</div><div>870</div><div>871</div><div>872</div><div>873</div><div>874</div><div>875</div><div>876</div><div>877</div><div>878</div><div>879</div><div>880</div><div>881</div><div>882</div><div>883</div><div>884</div><div>885</div><div>886</div><div>887</div><div>888</div><div>889</div><div>890</div><div>891</div><div>892</div><div>893</div><div>894</div><div>895</div><div>896</div><div>897</div><div>898</div><div>899</div><div>900</div><div>901</div><div>902</div><div>903</div><div>904</div><div>905</div><div>906</div><div>907</div><div>908</div><div>909</div><div>910</div><div>911</div><div>912</div><div>913</div><div>914</div><div>915</div><div>916</div><div>917</div><div>918</div><div>919</div><div>920</div><div>921</div><div>922</div><div>923</div><div>924</div><div>925</div><div>926</div><div>927</div><div>928</div><div>929</div><div>930</div><div>931</div><div>932</div><div>933</div><div>934</div><div>935</div><div>936</div><div>937</div><div>938</div><div>939</div><div>940</div><div>941</div><div>942</div><div>943</div><div>944</div><div>945</div><div>946</div><div>947</div><div>948</div><div>949</div><div>950</div><div>951</div><div>952</div><div>953</div><div>954</div><div>955</div><div>956</div><div>957</div><div>958</div><div>959</div><div>960</div><div>961</div><div>962</div><div>963</div><div>964</div><div>965</div><div>966</div><div>967</div><div>968</div><div>969</div><div>970</div><div>971</div><div>972</div><div>973</div><div>974</div><div>975</div><div>976</div><div>977</div><div>978</div><div>979</div><div>980</div><div>981</div><div>982</div><div>983</div><div>984</div><div>985</div><div>986</div><div>987</div><div>988</div><div>989</div><div>990</div><div>991</div><div>992</div><div>993</div><div>994</div><div>995</div><div>996</div><div>997</div><div>998</div><div>999</div><div>1000</div><div>1001</div><div>1002</div><div>1003</div><div>1004</div><div>1005</div><div>1006</div><div>1007</div><div>1008</div><div>1009</div><div>1010</div><div>1011</div><div>1012</div><div>1013</div><div>1014</div><div>1015</div><div>1016</div><div>1017</div><div>1018</div><div>1019</div><div>1020</div><div>1021</div><div>1022</div><div>1023</div><div>1024</div><div>1025</div><div>1026</div><div>1027</div><div>1028</div><div>1029</div><div>1030</div><div>1031</div><div>1032</div><div>1033</div><div>1034</div><div>1035</div><div>1036</div><div>1037</div><div>1038</div><div>1039</div><div>1040</div><div>1041</div><div>1042</div><div>1043</div><div>1044</div><div>1045</div><div>1046</div><div>1047</div><div>1048</div><div>1049</div><div>1050</div><div>1051</div><div>1052</div><div>1053</div><div>1054</div><div>1055</div><div>1056</div><div>1057</div><div>1058</div><div>1059</div><div>1060</div><div>1061</div><div>1062</div><div>1063</div><div>1064</div><div>1065</div><div>1066</div><div>1067</div><div>1068</div><div>1069</div><div>1070</div><div>1071</div><div>1072</div><div>1073</div><div>1074</div><div>1075</div><div>1076</div><div>1077</div><div>1078</div><div>1079</div><div>1080</div><div>1081</div><div>1082</div><div>1083</div><div>1084</div><div>1085</div><div>1086</div><div>1087</div><div>1088</div><div>1089</div><div>1090</div><div>1091</div><div>1092</div><div>1093</div><div>1094</div><div>1095</div><div>1096</div><div>1097</div><div>1098</div><div>1099</div><div>1100</div><div>1101</div><div>1102</div><div>1103</div><div>1104</div><div>1105</div><div>1106</div><div>1107</div><div>1108</div><div>1109</div><div>1110</div><div>1111</div><div>1112</div><div>1113</div><div>1114</div><div>1115</div><div>1116</div><div>1117</div><div>1118</div><div>1119</div><div>1120</div><div>1121</div><div>1122</div><div>1123</div><div>1124</div><div>1125</div><div>1126</div><div>1127</div><div>1128</div><div>1129</div><div>1130</div><div>1131</div><div>1132</div><div>1133</div><div>1134</div><div>1135</div><div>1136</div><div>1137</div><div>1138</div><div>1139</div><div>1140</div><div>1141</div><div>1142</div><div>1143</div><div>1144</div><div>1145</div><div>1146</div><div>1147</div><div>1148</div><div>1149</div><div>1150</div><div>1151</div><div>1152</div><div>1153</div><div>1154</div><div>1155</div><div>1156</div><div>1157</div><div>1158</div><div>1159</div><div>1160</div><div>1161</div><div>1162</div><div>1163</div><div>1164</div><div>1165</div><div>1166</div><div>1167</div><div>1168</div><div>1169</div><div>1170</div><div>1171</div><div>1172</div><div>1173</div><div>1174</div><div>1175</div><div>1176</div><div>1177</div><div>1178</div><div>1179</div><div>1180</div><div>1181</div><div>1182</div><div>1183</div><div>1184</div><div>1185</div><div>1186</div><div>1187</div><div>1188</div><div>1189</div><div>1190</div><div>1191</div><div>1192</div><div>1193</div><div>1194</div><div>1195</div><div>1196</div><div>1197</div><div>1198</div><div>1199</div><div>1200</div><div>1201</div><div>1202</div><div>1203</div><div>1204</div><div>1205</div><div>1206</div><div>1207</div><div>1208</div><div>1209</div><div>1210</div><div>1211</div><div>1212</div><div>1213</div><div>1214</div><div>1215</div><div>1216</div><div>1217</div><div>1218</div><div>1219</div><div>1220</div><div>1221</div><div>1222</div><div>1223</div><div>1224</div><div>1225</div><div>1226</div><div>1227</div><div>1228</div><div>1229</div><div>1230</div><div>1231</div><div>1232</div><div>1233</div><div>1234</div><div>1235</div><div>1236</div><div>1237</div><div>1238</div><div>1239</div><div>1240</div><div>1241</div><div>1242</div><div>1243</div><div>1244</div><div>1245</div><div>1246</div><div>1247</div><div>1248</div><div>1249</div><div>1250</div><div>1251</div><div>1252</div><div>1253</div><div>1254</div><div>1255</div><div>1256</div><div>1257</div><div>1258</div><div>1259</div><div>1260</div><div>1261</div><div>1262</div><div>1263</div><div>1264</div><div>1265</div><div>1266</div><div>1267</div><div>1268</div><div>1269</div><div>1270</div><div>1271</div><div>1272</div><div>1273</div><div>1274</div><div>1275</div><div>1276</div><div>1277</div><div>1278</div><div>1279</div><div>1280</div><div>1281</div><div>1282</div><div>1283</div><div>1284</div><div>1285</div><div>1286</div><div>1287</div><div>1288</div><div>1289</div><div>1290</div><div>1291</div><div>1292</div><div>1293</div><div>1294</div><div>1295</div><div>1296</div><div>1297</div><div>1298</div><div>1299</div><div>1300</div><div>1301</div><div>1302</div><div>1303</div><div>1304</div><div>1305</div><div>1306</div><div>1307</div><div>1308</div><div>1309</div><div>1310</div><div>1311</div><div>1312</div><div>1313</div><div>1314</div><div>1315</div><div>1316</div><div>1317</div><div>1318</div><div>1319</div><div>1320</div><div>1321</div><div>1322</div><div>1323</div><div>1324</div><div>1325</div><div>1326</div><div>1327</div><div>1328</div><div>1329</div><div>1330</div><div>1331</div><div>1332</div><div>1333</div><div>1334</div><div>1335</div><div>1336</div><div>1337</div><div>1338</div><div>1339</div><div>1340</div><div>1341</div><div>1342</div><div>1343</div><div>1344</div><div>1345</div><div>1346</div><div>1347</div><div>1348</div><div>1349</div><div>1350</div><div>1351</div><div>1352</div><div>1353</div><div>1354</div><div>1355</div><div>1356</div><div>1357</div><div>1358</div><div>1359</div><div>1360</div><div>1361</div><div>1362</div><div>1363</div><div>1364</div><div>1365</div><div>1366</div><div>1367</div><div>1368</div><div>1369</div><div>1370</div><div>1371</div><div>1372</div><div>1373</div><div>1374</div><div>1375</div><div>1376</div><div>1377</div><div>1378</div><div>1379</div><div>1380</div><div>1381</div><div>1382</div><div>1383</div><div>1384</div><div>1385</div><div>1386</div><div>1387</div><div>1388</div><div>1389</div><div>1390</div><div>1391</div><div>1392</div><div>1393</div><div>1394</div><div>1395</div><div>1396</div><div>1397</div><div>1398</div><div>1399</div><div>1400</div><div>1401</div><div>1402</div><div>1403</div><div>1404</div><div>1405</div><div>1406</div><div>1407</div><div>1408</div><div>1409</div><div>1410</div><div>1411</div><div>1412</div><div>1413</div><div>1414</div><div>1415</div><div>1416</div><div>1417</div><div>1418</div><div>1419</div><div>1420</div><div>1421</div><div>1422</div><div>1423</div><div>1424</div><div>1425</div><div>1426</div><div>1427</div></div>
		<div class="content" contenteditable="true">;; Declaring a namespaces
;; ----------------------------------------------------------------------------

;; ClojureScript supports modularity via namespaces. They allow you to group
;; logical definitions together.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">ns</span> <span class="symbol">lt-cljs-tutorial</span>
  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="keyword">:require</span> <span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="symbol">clojure.string</span> <span class="keyword">:as</span> <span class="symbol">string</span><span class="delimiter rainbow-2">]</span></span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

;; :require is how you can import functionality from a different namespace into
;; the current one. Here we are requiring `clojure.string` and giving it an
;; alias. We could write the following:

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">clojure.string/blank?</span> <span class="string">""</span><span class="delimiter rainbow-0">)</span></span>

;; But that's really verbose compared to:

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">string/blank?</span> <span class="string">""</span><span class="delimiter rainbow-0">)</span></span>


;; Comments
;; ----------------------------------------------------------------------------

;; There are three ways to create comments in ClojureScript. The first way is
;; by preceding a line with a semi-colon, just like the lines you are reading
;; now.

;; The second way is by preceding a form with `#_`. This causes ClojureScript
;; to skip the evaluation of only the form immediately following, without
;; affecting the evaluation of the surrounding forms.

;; Try to reveal the secret message below:

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">str</span> <span class="string">"The secret word is "</span> <span>#_(string/reverse "tpircSerujolC")</span><span class="delimiter rainbow-0">)</span></span>

;; Finally, you can also create a comment using the `comment` macro. One common
;; technique is to use the `comment` macro to include code to be evaluated in a
;; REPL, but which you do not normally want to be included in the compiled
;; source.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">comment</span>

  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">string/upper-case</span> <span class="string">"This is only a test..."</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

  

;; The `comment` macro makes the whole form return `nil`.


;; Definitions
;; ----------------------------------------------------------------------------

;; Once you have a namespace, you can start creating top level definitions in
;; that namespace.

;; You can define a top level with `def`.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">def</span> <span class="symbol">x</span> <span class="number">1</span><span class="delimiter rainbow-0">)</span></span>

<span class="symbol">x</span>

;; You can also refer to top level definitions by fully qualifying them.

<span class="symbol">lt-cljs-tutorial/x</span>

;; This means top levels can never be shadowed by locals and function
;; parameters.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">let</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="symbol">x</span> <span class="number">2</span><span class="delimiter rainbow-1">]</span></span>
  <span class="symbol">lt-cljs-tutorial/x</span><span class="delimiter rainbow-0">)</span></span>

;; One way to define a function is like this.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">def</span> <span class="symbol">y</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">fn</span> <span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="delimiter rainbow-2">]</span></span> <span class="number">1</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">y</span><span class="delimiter rainbow-0">)</span></span>

;; Defining functions in ClojureScript is common enough that `defn` sugar is
;; provided and idiomatic.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">defn</span> <span class="symbol">z</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="delimiter rainbow-1">]</span></span> <span class="number">1</span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">z</span><span class="delimiter rainbow-0">)</span></span>


;; Literal data types
;; ----------------------------------------------------------------------------

;; ClojureScript comes out of the box with the usual useful data literals.

;; Booleans

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">def</span> <span class="symbol">a-boolean</span> <span class="boolean">true</span><span class="delimiter rainbow-0">)</span></span>

;; Strings

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">def</span> <span class="symbol">a-string</span> <span class="string">"Hello!"</span><span class="delimiter rainbow-0">)</span></span>

;; Regular Expressions

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">def</span> <span class="symbol">a-regexp</span> <span class="string">#"\d{3}-?\d{3}-?\d{4}"</span><span class="delimiter rainbow-0">)</span></span>

;; Numbers

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">def</span> <span class="symbol">a-number</span> <span class="number">1</span><span class="delimiter rainbow-0">)</span></span>


;; Function literals
;; ----------------------------------------------------------------------------

;; ClojureScript also supports a shorthand function literal which is useful
;; You can use the % and %N placeholders to represent function arguments.

;; You should not abuse the function literal notation as it degrades readability
;; outside of simple cases. It is nice for simple functional cases such as
;; the following. You could map over a ClojureScript vector like this:

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">map</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">fn</span> <span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="symbol">n</span><span class="delimiter rainbow-2">]</span></span> <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">*</span> <span class="symbol">n</span> <span class="number">2</span><span class="delimiter rainbow-2">)</span></span><span class="delimiter rainbow-1">)</span></span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>

;; Or you can save typing a few characters like this:

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">map</span> <span class="collection list"><span class="delimiter rainbow-1">#</span><span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">*</span> % <span class="number">2</span><span class="delimiter rainbow-2"><span class="delimiter">)</span></span></span></span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>


;; JavaScript data type literals
;; ----------------------------------------------------------------------------

;; You can construct a JavaScript array with the `array` function.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">def</span> <span class="symbol">an-array</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">array</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

;; But ClojureScript also supports JavaScript data literals via the `#js`
;; reader literal.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">def</span> <span class="symbol">another-array</span> #js <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="number">1</span> <span class="number">2</span> <span class="number">3</span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>

;; Similarly, you can create simple JavaScript objects with `js-obj`.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">def</span> <span class="symbol">an-object</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">js-obj</span> <span class="string">"foo"</span> <span class="string">"bar"</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

;; But again you can save a few characters with `#js`.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">def</span> <span class="symbol">another-object</span> #js <span class="collection map"><span class="delimiter rainbow-1">{</span><span class="string">"foo"</span> <span class="string">"bar"</span><span class="delimiter rainbow-1">}</span></span><span class="delimiter rainbow-0">)</span></span>

;; It's important to note that `#js` is shallow, the contents of `#js` will be
;; ClojureScript data unless preceded by `#js`.

;; This is a mutable JavaScript object with an immutable ClojureScript vector
;; inside.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">def</span> <span class="symbol">shallow</span> #js <span class="collection map"><span class="delimiter rainbow-1">{</span><span class="string">"foo"</span> <span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="number">1</span> <span class="number">2</span> <span class="number">3</span><span class="delimiter rainbow-2">]</span></span><span class="delimiter rainbow-1">}</span></span><span class="delimiter rainbow-0">)</span></span>


;; Constructing a type
;; ----------------------------------------------------------------------------

;; Of course some JavaScript data types you will want to create with a
;; constructor.

;; (js/Date.) is equivalent to new Date().

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">def</span> <span class="symbol">a-date</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">js/Date.</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">def</span> <span class="symbol">another-date</span> #inst <span class="string">"2014-01-15"</span><span class="delimiter rainbow-0">)</span></span>

;; Note the above returns an `#inst` data literal.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">def</span> <span class="symbol">another-regexp</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">js/RegExp.</span> <span class="string">"\\d{3}-?\\d{3}-?\\d{4}"</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

;; Handy

;; NOTE: js/Foo is how you refer to global JavaScript entities of any kind.

<span class="symbol">js/Date</span>

<span class="symbol">js/RegExp</span>

<span class="symbol">js/requestAnimationFrame</span>

;; If you're curious about other JavaScript interop jump to the bottom of this
;; tutorial.


;; ClojureScript data types
;; ============================================================================

;; Unless there is a good reason, you should generally write your ClojureScript
;; programs with ClojureScript data types. They have many advantages over
;; JavaScript data types - they present a uniform API and they are immutable.

;; Vectors
;; ----------------------------------------------------------------------------

;; Instead of arrays, ClojureScript programmers use persistent vectors. They are
;; like arrays - they support efficient random access, efficient update
;; and efficient addition to the end.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">def</span> <span class="symbol">a-vector</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>

;; We can get the length of a vector in constant time via `count`.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">count</span> <span class="symbol">a-vector</span><span class="delimiter rainbow-0">)</span></span>

;; We can add an element to the end.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">def</span> <span class="symbol">another-vector</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">conj</span> <span class="symbol">a-vector</span> <span class="number">6</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

;; Note this does not mutate the array! `a-vector` will be left
;; unchanged.

<span class="symbol">a-vector</span>

<span class="symbol">another-vector</span>

;; Hallelujah! Here is where some ClojureScript magic
;; happens. `another-vector` appears to be a completely new vector
;; compared to `a-vector`. But it is not really so. Internally, the new
;; vector efficiently shares the `a-vector` structure. In this way, you
;; get the benefits of immutability without paying in performance.

;; We can access any element in a vector with `nth`. The following
;; will return the second element.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">nth</span> <span class="symbol">a-vector</span> <span class="number">1</span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">nth</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="string">"foo"</span> <span class="string">"bar"</span> <span class="string">"baz"</span><span class="delimiter rainbow-1">]</span></span> <span class="number">1</span><span class="delimiter rainbow-0">)</span></span>

;; Or with `get`...

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">get</span> <span class="symbol">a-vector</span> <span class="number">0</span><span class="delimiter rainbow-0">)</span></span>

;; ...which allows you to return an alternate value when the index is
;; out-of bounds.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">get</span> <span class="symbol">a-vector</span> <span class="number">-1</span> <span class="keyword">:out-of-bounds</span><span class="delimiter rainbow-0">)</span></span>
<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">get</span> <span class="symbol">a-vector</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">count</span> <span class="symbol">a-vector</span><span class="delimiter rainbow-1">)</span></span> <span class="keyword">:out-of-bounds</span><span class="delimiter rainbow-0">)</span></span>

;; Surprisingly, vectors can be treated as functions. This is actually
;; a very useful property for associative data structures to have as
;; we'll see below with sets.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">a-vector</span> <span class="number">1</span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="string">"foo"</span> <span class="string">"bar"</span> <span class="string">"baz"</span><span class="delimiter rainbow-1">]</span></span> <span class="number">1</span><span class="delimiter rainbow-0">)</span></span>


;; Maps
;; ----------------------------------------------------------------------------

;; Along with vectors, maps are the most common data type in ClojureScript.
;; Map usage is analogous to the usage of Object in JavaScript, but
;; ClojureScript maps are immutable and considerably more flexible.

;; Let's define a simple map. Note `:foo` is a ClojureScript keyword.
;; ClojureScript programmers prefer to use keywords for keys instead
;; of strings. They are more distinguishable from the rest of the
;; code, more efficient than plain strings, and they can be used in
;; function position (i.e. first position after the open parens), as
;; we'll see in a moment.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">def</span> <span class="symbol">a-map</span> <span class="collection map"><span class="delimiter rainbow-1">{</span><span class="keyword">:foo</span> <span class="string">"bar"</span> <span class="keyword">:baz</span> <span class="string">"woz"</span><span class="delimiter rainbow-1">}</span></span><span class="delimiter rainbow-0">)</span></span>

;; We can get the number of key-value pairs in constant time.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">count</span> <span class="symbol">a-map</span><span class="delimiter rainbow-0">)</span></span>

;; We can access a particular value for a key with `get`.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">get</span> <span class="symbol">a-map</span> <span class="keyword">:foo</span><span class="delimiter rainbow-0">)</span></span>

;; and return an alternative value when the key is not present

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">get</span> <span class="symbol">a-map</span> <span class="keyword">:bar</span> <span class="keyword">:not-found</span><span class="delimiter rainbow-0">)</span></span>

;; We can add a new key-value pair with `assoc`.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">def</span> <span class="symbol">another-map</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">assoc</span> <span class="symbol">a-map</span> <span class="keyword">:noz</span> <span class="string">"goz"</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

;; Again a-map is unchanged! Same magic as before for vectors

<span class="symbol">a-map</span>

<span class="symbol">another-map</span>

;; We can remove a key-value pair with `dissoc`.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">dissoc</span> <span class="symbol">a-map</span> <span class="keyword">:foo</span><span class="delimiter rainbow-0">)</span></span>

;; Again a-map is unchanged!

<span class="symbol">a-map</span>

;; Like vectors, maps can act like functions.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">a-map</span> <span class="keyword">:foo</span><span class="delimiter rainbow-0">)</span></span>

;; However ClojureScript keywords themselves can act like functions and the
;; following is more idiomatic.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="keyword">:foo</span> <span class="symbol">a-map</span><span class="delimiter rainbow-0">)</span></span>

;; We can check if a map contains a key, with `contains?`.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">contains?</span> <span class="symbol">a-map</span> <span class="keyword">:foo</span><span class="delimiter rainbow-0">)</span></span>

;; We can get all the keys in a map with `keys`.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">keys</span> <span class="symbol">a-map</span><span class="delimiter rainbow-0">)</span></span>

;; And all of the values with `vals`.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">vals</span> <span class="symbol">a-map</span><span class="delimiter rainbow-0">)</span></span>

;; We can put a lot of things in a map, even other maps
<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">def</span> <span class="symbol">a-nested-map</span> <span class="collection map"><span class="delimiter rainbow-1">{</span><span class="keyword">:customer-id</span> <span class="number">1e6</span>
                   <span class="keyword">:preferences</span> <span class="collection map"><span class="delimiter rainbow-2">{</span><span class="keyword">:nickname</span> <span class="string">"Bob"</span>
                                 <span class="keyword">:avatar</span> <span class="string">"http://en.gravatar.com/userimage/0/0.jpg"</span><span class="delimiter rainbow-2">}</span></span>
                   <span class="keyword">:services</span> <span class="collection map"><span class="delimiter rainbow-2">{</span><span class="keyword">:alerts</span> <span class="collection map"><span class="delimiter rainbow-3">{</span><span class="keyword">:daily</span> <span class="boolean">true</span><span class="delimiter rainbow-3">}</span></span><span class="delimiter rainbow-2">}</span></span><span class="delimiter rainbow-1">}</span></span><span class="delimiter rainbow-0">)</span></span>

;; and navigate its keys to get the nested value you're interested in

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">get-in</span> <span class="symbol">a-nested-map</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="keyword">:preferences</span> <span class="keyword">:nickname</span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>
<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">get-in</span> <span class="symbol">a-nested-map</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="keyword">:services</span> <span class="keyword">:alerts</span> <span class="keyword">:daily</span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>

;; or just find a top level key-value pair (i.e. MapEntry) by key

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">find</span> <span class="symbol">a-nested-map</span> <span class="keyword">:customer-id</span><span class="delimiter rainbow-0">)</span></span>
<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">find</span> <span class="symbol">a-nested-map</span> <span class="keyword">:services</span><span class="delimiter rainbow-0">)</span></span>

;; There are many cool ways to create maps.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">zipmap</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="keyword">:foo</span> <span class="keyword">:bar</span> <span class="keyword">:baz</span><span class="delimiter rainbow-1">]</span></span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="number">1</span> <span class="number">2</span> <span class="number">3</span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">hash-map</span> <span class="keyword">:foo</span> <span class="number">1</span> <span class="keyword">:bar</span> <span class="number">2</span> <span class="keyword">:baz</span> <span class="number">3</span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">apply</span> <span class="symbol">hash-map</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="keyword">:foo</span> <span class="number">1</span> <span class="keyword">:bar</span> <span class="number">2</span> <span class="keyword">:baz</span> <span class="number">3</span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">into</span> <span class="collection map"><span class="delimiter rainbow-1">{</span><span class="delimiter rainbow-1">}</span></span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="keyword">:foo</span> <span class="number">1</span><span class="delimiter rainbow-2">]</span></span> <span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="keyword">:bar</span> <span class="number">2</span><span class="delimiter rainbow-2">]</span></span> <span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="keyword">:baz</span> <span class="number">3</span><span class="delimiter rainbow-2">]</span></span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>

;; Unlike JavaScript objects, ClojureScript maps support complex keys.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">def</span> <span class="symbol">complex-map</span> <span class="collection map"><span class="delimiter rainbow-1">{</span><span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="number">1</span> <span class="number">2</span><span class="delimiter rainbow-2">]</span></span> <span class="keyword">:one-two</span> <span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="number">3</span> <span class="number">4</span><span class="delimiter rainbow-2">]</span></span> <span class="keyword">:three-four</span><span class="delimiter rainbow-1">}</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">get</span> <span class="symbol">complex-map</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="number">3</span> <span class="number">4</span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>


;; Keyword digression
;; ----------------------------------------------------------------------------

;; Let's take a moment to digress about keywords as they are so ubiquitous
;; in ClojureScript code.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">identity</span> <span class="keyword">:foo</span><span class="delimiter rainbow-0">)</span></span>

;; If you add an additional preceding colon you'll get a namespaced keyword.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">identity</span> <span class="keyword">::foo</span><span class="delimiter rainbow-0">)</span></span>

;; What good is this for? It allows you to put data into collections without
;; fear of namespace clashes without the tedium of manual namespacing them
;; in your source.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">identity</span> <span class="collection map"><span class="delimiter rainbow-1">{</span><span class="keyword">:user/foo</span> <span class="keyword">::foo</span><span class="delimiter rainbow-1">}</span></span><span class="delimiter rainbow-0">)</span></span>


;; Sets
;; ----------------------------------------------------------------------------

;; ClojureScript also supports sets.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">def</span> <span class="symbol">a-set</span> <span class="collection set"><span class="delimiter rainbow-1">#{</span><span class="keyword">:cat</span> <span class="keyword">:dog</span> <span class="keyword">:bird</span><span class="delimiter rainbow-1">}</span></span><span class="delimiter rainbow-0">)</span></span>

;; `:cat` is already in `a-set`, so it will be unchanged.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">conj</span> <span class="symbol">a-set</span> <span class="keyword">:cat</span><span class="delimiter rainbow-0">)</span></span>

;; But `:zebra` isn't.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">conj</span> <span class="symbol">a-set</span> <span class="keyword">:zebra</span><span class="delimiter rainbow-0">)</span></span>

;; If you haven't guessed already, `conj` is a "polymorphic" function that adds
;; an item to a collection. This is some of the uniformity we alluded to
;; earlier.

;; `contains?` works on sets just like it does on maps.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">contains?</span> <span class="symbol">a-set</span> <span class="keyword">:cat</span><span class="delimiter rainbow-0">)</span></span>

;; Like vectors and maps, sets can also act as functions. If the argument
;; exists in the set it will be returned, otherwise the set will return nil.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="collection set"><span class="delimiter rainbow-1">#{</span><span class="keyword">:cat</span> <span class="keyword">:dog</span> <span class="keyword">:bird</span><span class="delimiter rainbow-1">}</span></span> <span class="keyword">:cat</span><span class="delimiter rainbow-0">)</span></span>

;; This is powerful when combined with conditionals.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">defn</span> <span class="symbol">check</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="symbol">x</span><span class="delimiter rainbow-1">]</span></span>
  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">if</span> <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="collection set"><span class="delimiter rainbow-3">#{</span><span class="keyword">:cat</span> <span class="keyword">:dog</span> <span class="keyword">:bird</span><span class="delimiter rainbow-3">}</span></span> <span class="symbol">x</span><span class="delimiter rainbow-2">)</span></span>
    <span class="keyword">:valid</span>
    <span class="keyword">:invalid</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">check</span> <span class="keyword">:cat</span><span class="delimiter rainbow-0">)</span></span>
<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">check</span> <span class="keyword">:zebra</span><span class="delimiter rainbow-0">)</span></span>


;; Lists
;; ----------------------------------------------------------------------------

;; A less common ClojureScript data structure is lists. This may be
;; surprising as ClojureScript is a Lisp, but maps, vectors and sets
;; are the 'go-to' data structures for most applications. Still, lists are sometimes
;; useful—especially when dealing with code (i.e. code is data).

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">def</span> <span class="symbol">a-list</span> '<span class="collection list"><span class="delimiter rainbow-1">(</span><span class="keyword">:foo</span> <span class="keyword">:bar</span> <span class="keyword">:baz</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

;; `conj` is "polymorphic" on lists as well, and it's smart enough to
;; add the new item in the most efficient way on the basis of the
;; collection type.
<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">conj</span> <span class="symbol">a-list</span> <span class="keyword">:front</span><span class="delimiter rainbow-0">)</span></span>

;; and lists are immutable as well

<span class="symbol">a-list</span>

;; You can get the first element of a list

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">first</span> <span class="symbol">a-list</span><span class="delimiter rainbow-0">)</span></span>

;; or the tail of a list

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">rest</span> <span class="symbol">a-list</span><span class="delimiter rainbow-0">)</span></span>

;; which allows you to easly verify how ClojureScript shares data
;; structure instead of inefficiently copying data for supporting
;; immutability.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">def</span> <span class="symbol">another-list</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">conj</span> <span class="symbol">a-list</span> <span class="keyword">:front</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="symbol">another-list</span>

<span class="symbol">a-list</span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">identical?</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">rest</span> <span class="symbol">another-list</span><span class="delimiter rainbow-1">)</span></span> <span class="symbol">a-list</span><span class="delimiter rainbow-0">)</span></span>

;; `identical?` checks whether two things are represented by the same
;; thing in memory.


;; Equality
;; ============================================================================

;; ClojureScript has a much simpler notion of equality than what is present
;; in JavaScript. In ClojureScript equality is always deep equality.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">=</span> <span class="collection map"><span class="delimiter rainbow-1">{</span><span class="keyword">:one</span> <span class="number">1</span> <span class="keyword">:two</span> <span class="string">"2"</span><span class="delimiter rainbow-1">}</span></span> <span class="collection map"><span class="delimiter rainbow-1">{</span><span class="keyword">:one</span> <span class="number">1</span> <span class="keyword">:two</span> <span class="string">"2"</span><span class="delimiter rainbow-1">}</span></span><span class="delimiter rainbow-0">)</span></span>

;; Maps are not ordered.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">=</span> <span class="collection map"><span class="delimiter rainbow-1">{</span><span class="keyword">:one</span> <span class="number">1</span> <span class="keyword">:two</span> <span class="string">"2"</span><span class="delimiter rainbow-1">}</span></span> <span class="collection map"><span class="delimiter rainbow-1">{</span><span class="keyword">:two</span> <span class="string">"2"</span> <span class="keyword">:one</span> <span class="number">1</span><span class="delimiter rainbow-1">}</span></span><span class="delimiter rainbow-0">)</span></span>

;; For sequential collections, equality just works.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">=</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="number">1</span> <span class="number">2</span> <span class="number">3</span><span class="delimiter rainbow-1">]</span></span> '<span class="collection list"><span class="delimiter rainbow-1">(</span><span class="number">1</span> <span class="number">2</span> <span class="number">3</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

;; Again, it is possible to check whether two things are represented
;; by the same thing in memory with `identical?`.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">def</span> <span class="symbol">my-vec</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="number">1</span> <span class="number">2</span> <span class="number">3</span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>
<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">def</span> <span class="symbol">your-vec</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="number">1</span> <span class="number">2</span> <span class="number">3</span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">identical?</span> <span class="symbol">my-vec</span> <span class="symbol">your-vec</span><span class="delimiter rainbow-0">)</span></span>


;; Control
;; ============================================================================

;; In order to write useful programs, we need to be able to express
;; control flow. ClojureScript provides the usual control constructs,
;; however truth-y and false-y values are not the same as in
;; JavaScript so it's worth reviewing.

;; if
;; ----------------------------------------------------------------------------

;; 0 is not a false-y value.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">if</span> <span class="number">0</span>
  <span class="string">"Zero is not false-y"</span>
  <span class="string">"Yuck"</span><span class="delimiter rainbow-0">)</span></span>

;; Nor is the empty string.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">if</span> <span class="string">""</span>
  <span class="string">"An empty string is not false-y"</span>
  <span class="string">"Yuck"</span><span class="delimiter rainbow-0">)</span></span>

;; the empty vector

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">if</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="delimiter rainbow-1">]</span></span>
  <span class="string">"An empty vector is not false-y"</span>
  <span class="string">"Yuck"</span><span class="delimiter rainbow-0">)</span></span>

;; the empty list

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">if</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="delimiter rainbow-1">)</span></span>
  <span class="string">"An empty list is not false-y"</span>
  <span class="string">"Yuck"</span><span class="delimiter rainbow-0">)</span></span>

;; the empty map

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">if</span> <span class="collection map"><span class="delimiter rainbow-1">{</span><span class="delimiter rainbow-1">}</span></span>
  <span class="string">"An empty map is not false-y"</span>
  <span class="string">"Yuck"</span><span class="delimiter rainbow-0">)</span></span>

;; the empty set

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">if</span> <span class="collection set"><span class="delimiter rainbow-1">#{</span><span class="delimiter rainbow-1">}</span></span>
  <span class="string">"An empty set is not false-y"</span>
  <span class="string">"Yuck"</span><span class="delimiter rainbow-0">)</span></span>

;; and even the empty regexp

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">if</span> <span class="string">#""</span>
  <span class="string">"An empty regexp is not false-y"</span>
  <span class="string">"Yuck"</span><span class="delimiter rainbow-0">)</span></span>

;; The only false-y values in ClojureScript are `nil` and `false`. `undefined`
;; is not really a valid ClojureScript value and is generally coerced to `nil`.


;; cond
;; ----------------------------------------------------------------------------

;; Nesting `if` tends to be noisy and hard to read so ClojureScript
;; provides a `cond` macro to deal with this.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">cond</span>
  <span class="nil">nil</span> <span class="string">"Not going to return this"</span>
  <span class="boolean">false</span> <span class="string">"Nope not going to return this either"</span>
  <span class="keyword">:else</span> <span class="string">"Default case"</span><span class="delimiter rainbow-0">)</span></span>


;; loop/recur
;; ----------------------------------------------------------------------------

;; The most primitive looping construct in ClojureScript is `loop`/`recur`.
;; Like `let`, `loop` establishes bindings and allows you to set their initial values.
;; Like `let`, you may have a sequence of forms for the body. In tail
;; positions, you may write a `recur` statement that will set the bindings for
;; the next iteration of the `loop`. Using `loop`/`recur` is usually considered bad
;; style if a reasonable functional solution via `map`/`filter`/`reduce` or a list
;; comprehension is possible.

;; While you might write this in JavaScript:
;;
;; var ret = [];
;; for(var i = 0; i &lt; 10; i++) ret.push(i)
;;
;; In ClojureScript you would write `loop`/`recur` like so:

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">loop</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="symbol">i</span> <span class="number">0</span> <span class="symbol">ret</span> <span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="delimiter rainbow-2">]</span></span><span class="delimiter rainbow-1">]</span></span>
  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">if</span> <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">&lt;</span> <span class="symbol">i</span> <span class="number">10</span><span class="delimiter rainbow-2">)</span></span>
    <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">recur</span> <span class="collection list"><span class="delimiter rainbow-3">(</span><span class="symbol">inc</span> <span class="symbol">i</span><span class="delimiter rainbow-3">)</span></span> <span class="collection list"><span class="delimiter rainbow-3">(</span><span class="symbol">conj</span> <span class="symbol">ret</span> <span class="symbol">i</span><span class="delimiter rainbow-3">)</span></span><span class="delimiter rainbow-2">)</span></span>
    <span class="symbol">ret</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

;; Again avoid `loop`/`recur` unless you really need it. The loop above would
;; be better expressed as the following:

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">into</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="delimiter rainbow-1">]</span></span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">range</span> <span class="number">10</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>


;; Moar functions
;; ============================================================================

;; Functions are the essence of any significant ClojureScript program, so
;; we will dive into features that are unique to ClojureScript functions that
;; might be unfamiliar.

;; Here is a simple function that takes two arguments and adds them.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">defn</span> <span class="symbol">foo1</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="symbol">a</span> <span class="symbol">b</span><span class="delimiter rainbow-1">]</span></span>
  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">+</span> <span class="symbol">a</span> <span class="symbol">b</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">foo1</span> <span class="number">1</span> <span class="number">2</span><span class="delimiter rainbow-0">)</span></span>

;; Functions can have multiple arities.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">defn</span> <span class="symbol">foo2</span>
  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="symbol">a</span> <span class="symbol">b</span><span class="delimiter rainbow-2">]</span></span> <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">+</span> <span class="symbol">a</span> <span class="symbol">b</span><span class="delimiter rainbow-2">)</span></span><span class="delimiter rainbow-1">)</span></span>
  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="symbol">a</span> <span class="symbol">b</span> <span class="symbol">c</span><span class="delimiter rainbow-2">]</span></span> <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">*</span> <span class="symbol">a</span> <span class="symbol">b</span> <span class="symbol">c</span><span class="delimiter rainbow-2">)</span></span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">foo2</span> <span class="number">3</span> <span class="number">4</span><span class="delimiter rainbow-0">)</span></span>
<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">foo2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span><span class="delimiter rainbow-0">)</span></span>

;; Multiple arities can be used to supply default values.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">defn</span> <span class="symbol">defaults</span>
  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="symbol">x</span><span class="delimiter rainbow-2">]</span></span> <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">defaults</span> <span class="symbol">x</span> <span class="keyword">:default</span><span class="delimiter rainbow-2">)</span></span><span class="delimiter rainbow-1">)</span></span>
  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="symbol">x</span> <span class="symbol">y</span><span class="delimiter rainbow-2">]</span></span> <span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="symbol">x</span> <span class="symbol">y</span><span class="delimiter rainbow-2">]</span></span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">defaults</span> <span class="keyword">:explicit</span><span class="delimiter rainbow-0">)</span></span>
<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">defaults</span> <span class="keyword">:explicit1</span> <span class="keyword">:explicit2</span><span class="delimiter rainbow-0">)</span></span>

;; Functions support rest arguments.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">defn</span> <span class="symbol">foo3</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="symbol">a</span> <span class="symbol">b</span> <span class="symbol">&amp;</span> <span class="symbol">d</span><span class="delimiter rainbow-1">]</span></span>
  <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="symbol">a</span> <span class="symbol">b</span> <span class="symbol">d</span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">foo3</span> <span class="number">1</span> <span class="number">2</span><span class="delimiter rainbow-0">)</span></span>
<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">foo3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span><span class="delimiter rainbow-0">)</span></span>

;; You can apply functions.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">apply</span> <span class="symbol">+</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>


;; multimethods
;; ----------------------------------------------------------------------------

;; Often when you need some polymorphism, and performance isn't an issue,
;; multimethods will suffice. Multimethods are functions that allow open
;; extension, but instead of limiting dispatch to type, dispatch is controlled
;; by whatever value the dispatch fn originally supplied to `defmulti` returns.

;; Here is the simplest multimethod you can write. It simply dispatches on
;; the value received.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">defmulti</span> <span class="symbol">simple-multi</span> <span class="symbol">identity</span><span class="delimiter rainbow-0">)</span></span>

;; Now we can define methods for particular values.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">defmethod</span> <span class="symbol">simple-multi</span> <span class="number">1</span>
  <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="symbol">value</span><span class="delimiter rainbow-1">]</span></span> <span class="string">"Dispatched on 1"</span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">simple-multi</span> <span class="number">1</span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">defmethod</span> <span class="symbol">simple-multi</span> <span class="string">"foo"</span>
  <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="symbol">value</span><span class="delimiter rainbow-1">]</span></span> <span class="string">"Dispatched on foo"</span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">simple-multi</span> <span class="string">"foo"</span><span class="delimiter rainbow-0">)</span></span>

;; However we haven't defined a case for "bar"
; (Highlight and evaluate the `simple-multi` form below)
<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">comment</span>
  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">simple-multi</span> <span class="string">"bar"</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>
  


;; Here is a function that takes a list. It dispatches on the first element
;; of the list!
;; Note that this example uses destructuring, which is covered later.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">defmulti</span> <span class="symbol">parse</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">fn</span> <span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="collection vector"><span class="delimiter rainbow-3">[</span><span class="symbol">f</span> <span class="symbol">&amp;</span> <span class="symbol">r</span> <span class="keyword">:as</span> <span class="symbol">form</span><span class="delimiter rainbow-3">]</span></span><span class="delimiter rainbow-2">]</span></span> <span class="symbol">f</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">defmethod</span> <span class="symbol">parse</span> '<span class="symbol">if</span>
  <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="symbol">form</span><span class="delimiter rainbow-1">]</span></span> <span class="collection map"><span class="delimiter rainbow-1">{</span><span class="keyword">:op</span> <span class="keyword">:if</span><span class="delimiter rainbow-1">}</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">defmethod</span> <span class="symbol">parse</span> '<span class="symbol">let</span>
  <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="symbol">form</span><span class="delimiter rainbow-1">]</span></span> <span class="collection map"><span class="delimiter rainbow-1">{</span><span class="keyword">:op</span> <span class="keyword">:let</span><span class="delimiter rainbow-1">}</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">parse</span> '<span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">if</span> <span class="symbol">a</span> <span class="symbol">b</span> <span class="symbol">c</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>
<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">parse</span> '<span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">let</span> <span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="symbol">x</span> <span class="number">1</span><span class="delimiter rainbow-2">]</span></span> <span class="symbol">x</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>


;; Scoping
;; ============================================================================

;; Unlike JavaScript, there is no hoisting in ClojureScript. ClojureScript
;; has lexical scoping.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">def</span> <span class="symbol">some-x</span> <span class="number">1</span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">let</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="symbol">some-x</span> <span class="number">2</span><span class="delimiter rainbow-1">]</span></span>
  <span class="symbol">some-x</span><span class="delimiter rainbow-0">)</span></span>

<span class="symbol">some-x</span>

;; Closures
;; ----------------------------------------------------------------------------

;; Could a language with such a name miss closures? Surely it can't. You
;; may be already familiar with them in JavaScript, even if it's a
;; variable scoped language.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">let</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="symbol">a</span> <span class="number">1e3</span><span class="delimiter rainbow-1">]</span></span>
  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">defn</span> <span class="symbol">foo</span> <span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="delimiter rainbow-2">]</span></span>
    <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">*</span> <span class="symbol">a</span> <span class="symbol">a</span><span class="delimiter rainbow-2">)</span></span><span class="delimiter rainbow-1">)</span></span>
  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">defn</span> <span class="symbol">bar</span> <span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="delimiter rainbow-2">]</span></span>
    <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">+</span> <span class="collection list"><span class="delimiter rainbow-3">(</span><span class="symbol">foo</span><span class="delimiter rainbow-3">)</span></span> <span class="symbol">a</span><span class="delimiter rainbow-2">)</span></span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

;; Above we defined `foo` and `bar` functions inside the scope of a
;; `let` form and they both know about `a` (i.e. they close over `a`)
;; Note, even if defined inside a `let`, `foo` and `bar` are available
;; in the outer scope. This is because all `def` expressions are always
;; top level. See the footnote at the end of this section.


<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">foo</span><span class="delimiter rainbow-0">)</span></span>
<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">bar</span><span class="delimiter rainbow-0">)</span></span>

;; And Nobody else.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">comment</span>
  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">defn</span> <span class="symbol">baz</span> <span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="delimiter rainbow-2">]</span></span>
    <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">type</span> <span class="symbol">a</span><span class="delimiter rainbow-2">)</span></span><span class="delimiter rainbow-1">)</span></span>
  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">baz</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>
  

;; That's why some people say that closures are the poor man's objects.
;; They encapsulate the information as well.

;; But in ClojureScript, functions' parameters and let bindings' locals
;; are not mutable! That goes for loop locals, too!

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">let</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="symbol">fns</span> <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">loop</span> <span class="collection vector"><span class="delimiter rainbow-3">[</span><span class="symbol">i</span> <span class="number">0</span> <span class="symbol">ret</span> <span class="collection vector"><span class="delimiter rainbow-4">[</span><span class="delimiter rainbow-4">]</span></span><span class="delimiter rainbow-3">]</span></span>
            <span class="collection list"><span class="delimiter rainbow-3">(</span><span class="symbol">if</span> <span class="collection list"><span class="delimiter rainbow-4">(</span><span class="symbol">&lt;</span> <span class="symbol">i</span> <span class="number">10</span><span class="delimiter rainbow-4">)</span></span>
              <span class="collection list"><span class="delimiter rainbow-4">(</span><span class="symbol">recur</span> <span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">inc</span> <span class="symbol">i</span><span class="delimiter rainbow-0">)</span></span> <span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">conj</span> <span class="symbol">ret</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">fn</span> <span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="delimiter rainbow-2">]</span></span> <span class="symbol">i</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span><span class="delimiter rainbow-4">)</span></span>
              <span class="symbol">ret</span><span class="delimiter rainbow-3">)</span></span><span class="delimiter rainbow-2">)</span></span><span class="delimiter rainbow-1">]</span></span>
  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">map</span> <span class="collection list"><span class="delimiter rainbow-2">#</span><span class="collection list"><span class="delimiter rainbow-3">(</span>%<span class="delimiter rainbow-3"><span class="delimiter">)</span></span></span></span> <span class="symbol">fns</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

;; In JavaScript you would see a list of ten 9s. In ClojureScript we
;; see the expected numbers from 0 to 9.

;; FOOTNOTE:
;;
;; `def` expressions (including `defn`) are always top level. People familiar
;; with Scheme or other Lisps often mistakenly write the following in Clojure:

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">defn</span> <span class="symbol">not-scheme</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="delimiter rainbow-1">]</span></span>
  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">defn</span> <span class="symbol">no-no-no</span> <span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="delimiter rainbow-2">]</span></span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

;; This is almost always incorrect. If you need to write a local function just
;; do it with a let binding.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">defn</span> <span class="symbol">outer-fn</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="delimiter rainbow-1">]</span></span>
  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">let</span> <span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="symbol">inner-fn</span> <span class="collection list"><span class="delimiter rainbow-3">(</span><span class="symbol">fn</span> <span class="collection vector"><span class="delimiter rainbow-4">[</span><span class="delimiter rainbow-4">]</span></span><span class="delimiter rainbow-3">)</span></span><span class="delimiter rainbow-2">]</span></span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>


;; Destructuring
;; ============================================================================

;; In any serious ClojureScript program, there will be significant amounts of
;; data manipulation. Again, we will see that ClojureScript's uniformity
;; pays off.

;; In ClojureScript anywhere bindings are allowed (like `let` or function
;; parameters), destructuring is allowed. This is similar to the destructuring
;; proposed for ES6, but the system provided in ClojureScript benefits from
;; all the collections supporting uniform access.


;; Sequence destructuring
;; ----------------------------------------------------------------------------

;; Destructuring sequential types is particularly useful.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">let</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="symbol">f</span> <span class="symbol">&amp;</span> <span class="symbol">r</span><span class="delimiter rainbow-2">]</span></span> '<span class="collection list"><span class="delimiter rainbow-2">(</span><span class="number">1</span> <span class="number">2</span> <span class="number">3</span><span class="delimiter rainbow-2">)</span></span><span class="delimiter rainbow-1">]</span></span>
  <span class="symbol">f</span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">let</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="symbol">f</span> <span class="symbol">&amp;</span> <span class="symbol">r</span><span class="delimiter rainbow-2">]</span></span> '<span class="collection list"><span class="delimiter rainbow-2">(</span><span class="number">1</span> <span class="number">2</span> <span class="number">3</span><span class="delimiter rainbow-2">)</span></span><span class="delimiter rainbow-1">]</span></span>
  <span class="symbol">r</span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">let</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="symbol">r</span> <span class="symbol">g</span> <span class="symbol">b</span><span class="delimiter rainbow-2">]</span></span> <span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="number">255</span> <span class="number">255</span> <span class="number">150</span><span class="delimiter rainbow-2">]</span></span><span class="delimiter rainbow-1">]</span></span>
  <span class="symbol">g</span><span class="delimiter rainbow-0">)</span></span>

;; _ is just a convention for saying that you are not interested in the
;; item at the corresponding position. It has no other special meaning.
;; Here we're only interested in the third local variable named `b`.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">let</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="symbol">_</span> <span class="symbol">_</span> <span class="symbol">b</span><span class="delimiter rainbow-2">]</span></span> <span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="number">255</span> <span class="number">255</span> <span class="number">150</span><span class="delimiter rainbow-2">]</span></span><span class="delimiter rainbow-1">]</span></span>
  <span class="symbol">b</span><span class="delimiter rainbow-0">)</span></span>

;; destructuring function arguments works just as well. Here we are
;; only interested in the second argument `g`.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">defn</span> <span class="symbol">green</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="symbol">_</span> <span class="symbol">g</span> <span class="symbol">_</span><span class="delimiter rainbow-2">]</span></span><span class="delimiter rainbow-1">]</span></span> <span class="symbol">g</span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">green</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="number">255</span> <span class="number">255</span> <span class="number">150</span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>


;; Map destructuring
;; ----------------------------------------------------------------------------

;; Map destructuring is also useful. Here we destructure the value for the
;; `:foo` key and bind it to a local `f`, and the value for `:baz` key
;; and bind it to a local `b`.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">let</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="collection map"><span class="delimiter rainbow-2">{</span><span class="symbol">f</span> <span class="keyword">:foo</span> <span class="symbol">b</span> <span class="keyword">:baz</span><span class="delimiter rainbow-2">}</span></span> <span class="collection map"><span class="delimiter rainbow-2">{</span><span class="keyword">:foo</span> <span class="string">"bar"</span> <span class="keyword">:baz</span> <span class="string">"woz"</span><span class="delimiter rainbow-2">}</span></span><span class="delimiter rainbow-1">]</span></span>
  <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="symbol">f</span> <span class="symbol">b</span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>

;; If we don't want to rename, we can just use `:keys`.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">let</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="collection map"><span class="delimiter rainbow-2">{</span><span class="keyword">:keys</span> <span class="collection vector"><span class="delimiter rainbow-3">[</span><span class="symbol">first</span> <span class="symbol">last</span><span class="delimiter rainbow-3">]</span></span><span class="delimiter rainbow-2">}</span></span> <span class="collection map"><span class="delimiter rainbow-2">{</span><span class="keyword">:first</span> <span class="string">"Bob"</span> <span class="keyword">:last</span> <span class="string">"Smith"</span><span class="delimiter rainbow-2">}</span></span><span class="delimiter rainbow-1">]</span></span>
  <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="symbol">first</span> <span class="symbol">last</span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>

; We can also destructure a nested map

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">let</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="collection map"><span class="delimiter rainbow-2">{</span><span class="keyword">:keys</span> <span class="collection vector"><span class="delimiter rainbow-3">[</span><span class="symbol">first</span> <span class="symbol">last</span><span class="delimiter rainbow-3">]</span></span> <span class="collection map"><span class="delimiter rainbow-3">{</span><span class="keyword">:keys</span> <span class="collection vector"><span class="delimiter rainbow-4">[</span><span class="symbol">addr1</span> <span class="symbol">addr2</span><span class="delimiter rainbow-4">]</span></span><span class="delimiter rainbow-3">}</span></span> <span class="keyword">:address</span><span class="delimiter rainbow-2">}</span></span> <span class="collection map"><span class="delimiter rainbow-2">{</span><span class="keyword">:first</span> <span class="string">"Bob"</span> <span class="keyword">:last</span> <span class="string">"Smith"</span> <span class="keyword">:address</span> <span class="collection map"><span class="delimiter rainbow-3">{</span><span class="keyword">:addr1</span> <span class="string">"123"</span> <span class="keyword">:addr2</span> <span class="string">"Main street"</span><span class="delimiter rainbow-3">}</span></span><span class="delimiter rainbow-2">}</span></span><span class="delimiter rainbow-1">]</span></span>
  <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="symbol">first</span> <span class="symbol">last</span> <span class="symbol">addr1</span> <span class="symbol">addr2</span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>

; Similar to :keys for keyword, :strs and :syms directives are available for matching string and symbol :keys

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">let</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="collection map"><span class="delimiter rainbow-2">{</span><span class="keyword">:strs</span> <span class="collection vector"><span class="delimiter rainbow-3">[</span><span class="symbol">first</span> <span class="symbol">last</span><span class="delimiter rainbow-3">]</span></span><span class="delimiter rainbow-2">}</span></span> <span class="collection map"><span class="delimiter rainbow-2">{</span><span class="string">"first"</span> <span class="string">"Bob"</span> <span class="string">"last"</span> <span class="string">"Smith"</span><span class="delimiter rainbow-2">}</span></span><span class="delimiter rainbow-1">]</span></span>
  <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="symbol">first</span> <span class="symbol">last</span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">let</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="collection map"><span class="delimiter rainbow-2">{</span><span class="keyword">:syms</span> <span class="collection vector"><span class="delimiter rainbow-3">[</span><span class="symbol">first</span> <span class="symbol">last</span><span class="delimiter rainbow-3">]</span></span><span class="delimiter rainbow-2">}</span></span> <span class="collection map"><span class="delimiter rainbow-2">{</span>'<span class="symbol">first</span> <span class="string">"Bob"</span> '<span class="symbol">last</span> <span class="string">"Smith"</span><span class="delimiter rainbow-2">}</span></span><span class="delimiter rainbow-1">]</span></span>
  <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="symbol">first</span> <span class="symbol">last</span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>

;; The above map destructuring form is very useful when you need to
;; define a function with optional, non positional and defaulted
;; arguments.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">defn</span> <span class="symbol">magic</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="symbol">&amp;</span> <span class="collection map"><span class="delimiter rainbow-2">{</span><span class="keyword">:keys</span> <span class="collection vector"><span class="delimiter rainbow-3">[</span><span class="symbol">k</span> <span class="symbol">g</span> <span class="symbol">h</span><span class="delimiter rainbow-3">]</span></span>
                <span class="keyword">:or</span> <span class="collection map"><span class="delimiter rainbow-3">{</span><span class="symbol">k</span> <span class="number">1</span>
                     <span class="symbol">g</span> <span class="number">2</span>
                     <span class="symbol">h</span> <span class="number">3</span><span class="delimiter rainbow-3">}</span></span><span class="delimiter rainbow-2">}</span></span><span class="delimiter rainbow-1">]</span></span>
  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">hash-map</span> <span class="keyword">:k</span> <span class="symbol">k</span>
            <span class="keyword">:g</span> <span class="symbol">g</span>
            <span class="keyword">:h</span> <span class="symbol">h</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">magic</span><span class="delimiter rainbow-0">)</span></span>
<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">magic</span> <span class="keyword">:k</span> <span class="number">10</span><span class="delimiter rainbow-0">)</span></span>
<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">magic</span> <span class="keyword">:g</span> <span class="number">100</span><span class="delimiter rainbow-0">)</span></span>
<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">magic</span> <span class="keyword">:h</span> <span class="number">1000</span><span class="delimiter rainbow-0">)</span></span>
<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">magic</span> <span class="keyword">:k</span> <span class="number">10</span> <span class="keyword">:g</span> <span class="number">100</span> <span class="keyword">:h</span> <span class="number">1000</span><span class="delimiter rainbow-0">)</span></span>
<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">magic</span> <span class="keyword">:h</span> <span class="number">1000</span> <span class="keyword">:k</span> <span class="number">10</span> <span class="keyword">:g</span> <span class="number">100</span><span class="delimiter rainbow-0">)</span></span>

;; Sequences
;; ============================================================================

;; We said that ClojureScript data structures are to be preferred as they
;; provide a uniform interface. All ClojureScript collections satisfy
;; the ISeqable protocol, which means iteration is uniform
;; (i.e. polymorphic) for all collection types.


;; Map / Filter / Reduce
;; ----------------------------------------------------------------------------

;; ClojureScript supports the same bells and whistles out of the box that you may
;; be familiar with from other functional programming languages or JavaScript
;; libraries such as Underscore.js

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">map</span> <span class="symbol">inc</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">filter</span> <span class="symbol">even?</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">range</span> <span class="number">10</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">remove</span> <span class="symbol">odd?</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">range</span> <span class="number">10</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

;; ClojureScript's `map` and `filter` operations are lazy. You can stack up
;; operations without getting too concerned about multiple traversals.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">map</span> <span class="collection list"><span class="delimiter rainbow-1">#</span><span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">*</span> % %<span class="delimiter rainbow-2"><span class="delimiter">)</span></span></span></span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">filter</span> <span class="symbol">even?</span> <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">range</span> <span class="number">20</span><span class="delimiter rainbow-2">)</span></span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">reduce</span> <span class="symbol">+</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">range</span> <span class="number">100</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>


;; List comprehensions
;; ----------------------------------------------------------------------------

;; ClojureScript supports the list comprehensions you might know from various
;; languages. List comprehensions are sometimes more natural or more readable
;; than a chain of `map` and `filter` operations.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">for</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="symbol">x</span> <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">range</span> <span class="number">1</span> <span class="number">10</span><span class="delimiter rainbow-2">)</span></span>
      <span class="symbol">y</span> <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">range</span> <span class="number">1</span> <span class="number">10</span><span class="delimiter rainbow-2">)</span></span><span class="delimiter rainbow-1">]</span></span>
  <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="symbol">x</span> <span class="symbol">y</span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">for</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="symbol">x</span> <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">range</span> <span class="number">1</span> <span class="number">10</span><span class="delimiter rainbow-2">)</span></span>
      <span class="symbol">y</span> <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">range</span> <span class="number">1</span> <span class="number">10</span><span class="delimiter rainbow-2">)</span></span>
      <span class="keyword">:when</span> <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">and</span> <span class="collection list"><span class="delimiter rainbow-3">(</span><span class="symbol">zero?</span> <span class="collection list"><span class="delimiter rainbow-4">(</span><span class="symbol">rem</span> <span class="symbol">x</span> <span class="symbol">y</span><span class="delimiter rainbow-4">)</span></span><span class="delimiter rainbow-3">)</span></span>
                 <span class="collection list"><span class="delimiter rainbow-3">(</span><span class="symbol">even?</span> <span class="collection list"><span class="delimiter rainbow-4">(</span><span class="symbol">quot</span> <span class="symbol">x</span> <span class="symbol">y</span><span class="delimiter rainbow-4">)</span></span><span class="delimiter rainbow-3">)</span></span><span class="delimiter rainbow-2">)</span></span><span class="delimiter rainbow-1">]</span></span>
  <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="symbol">x</span> <span class="symbol">y</span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">for</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="symbol">x</span> <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">range</span> <span class="number">1</span> <span class="number">10</span><span class="delimiter rainbow-2">)</span></span>
      <span class="symbol">y</span> <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">range</span> <span class="number">1</span> <span class="number">10</span><span class="delimiter rainbow-2">)</span></span>
      <span class="keyword">:let</span> <span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="symbol">prod</span> <span class="collection list"><span class="delimiter rainbow-3">(</span><span class="symbol">*</span> <span class="symbol">x</span> <span class="symbol">y</span><span class="delimiter rainbow-3">)</span></span><span class="delimiter rainbow-2">]</span></span><span class="delimiter rainbow-1">]</span></span>
  <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="symbol">x</span> <span class="symbol">y</span> <span class="symbol">prod</span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>


;; Seqable collections
;; ----------------------------------------------------------------------------

;; Most ClojureScript collections can be coerced into sequences.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">seq</span> <span class="collection map"><span class="delimiter rainbow-1">{</span><span class="keyword">:foo</span> <span class="string">"bar"</span> <span class="keyword">:baz</span> <span class="string">"woz"</span><span class="delimiter rainbow-1">}</span></span><span class="delimiter rainbow-0">)</span></span>
<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">seq</span> <span class="collection set"><span class="delimiter rainbow-1">#{</span><span class="keyword">:cat</span> <span class="keyword">:dog</span> <span class="keyword">:bird</span><span class="delimiter rainbow-1">}</span></span><span class="delimiter rainbow-0">)</span></span>
<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">seq</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>
<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">seq</span> '<span class="collection list"><span class="delimiter rainbow-1">(</span><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

;; Many ClojureScript functions will call `seq` on their arguments in order to
;; provide the expected behavior. The following demonstrates that you can
;; uniformly iterate over all the ClojureScript collections!

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">first</span> <span class="collection map"><span class="delimiter rainbow-1">{</span><span class="keyword">:foo</span> <span class="string">"bar"</span> <span class="keyword">:baz</span> <span class="string">"woz"</span><span class="delimiter rainbow-1">}</span></span><span class="delimiter rainbow-0">)</span></span>
<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">rest</span> <span class="collection map"><span class="delimiter rainbow-1">{</span><span class="keyword">:foo</span> <span class="string">"bar"</span> <span class="keyword">:baz</span> <span class="string">"woz"</span><span class="delimiter rainbow-1">}</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">first</span> <span class="collection set"><span class="delimiter rainbow-1">#{</span><span class="keyword">:cat</span> <span class="keyword">:dog</span> <span class="keyword">:bird</span><span class="delimiter rainbow-1">}</span></span><span class="delimiter rainbow-0">)</span></span>
<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">rest</span> <span class="collection set"><span class="delimiter rainbow-1">#{</span><span class="keyword">:cat</span> <span class="keyword">:dog</span> <span class="keyword">:bird</span><span class="delimiter rainbow-1">}</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">first</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>
<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">rest</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">first</span> '<span class="collection list"><span class="delimiter rainbow-1">(</span><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>
<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">rest</span> '<span class="collection list"><span class="delimiter rainbow-1">(</span><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>


;; Metadata
;; ============================================================================

;; All of the ClojureScript standard collections support metadata. Metadata
;; is a useful way to annotate data without affecting equality. The
;; ClojureScript compiler uses this language feature to great effect.

;; You can add metadata to a ClojureScript collection with `with-meta`. The
;; metadata must be a map.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">def</span> <span class="symbol">plain-data</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">def</span> <span class="symbol">decorated-data</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">with-meta</span> <span class="symbol">plain-data</span> <span class="collection map"><span class="delimiter rainbow-2">{</span><span class="keyword">:url</span> <span class="string">"http://lighttable.com"</span><span class="delimiter rainbow-2">}</span></span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

;; Metadata has no effect on equality.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">=</span> <span class="symbol">plain-data</span> <span class="symbol">decorated-data</span><span class="delimiter rainbow-0">)</span></span>

;; You can access metadata with `meta`.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">meta</span> <span class="symbol">decorated-data</span><span class="delimiter rainbow-0">)</span></span>


;; Error Handling
;; ============================================================================

;; Error handling in ClojureScript is relatively straightforward and more or
;; less similar to what is offered in JavaScript.

;; You can construct an error like this.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">js/Error.</span> <span class="string">"Oops"</span><span class="delimiter rainbow-0">)</span></span>

;; You can throw an error like this.
;; (Highlight and evaluate the `throw` form below)

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">comment</span>
  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">throw</span> <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">js/Error.</span> <span class="string">"Oops"</span><span class="delimiter rainbow-2">)</span></span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>
  

;; You can catch an error like this.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">try</span>
  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">throw</span> <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">js/Error.</span> <span class="string">"Oops"</span><span class="delimiter rainbow-2">)</span></span><span class="delimiter rainbow-1">)</span></span>
  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">catch</span> <span class="symbol">js/Error</span> <span class="symbol">e</span>
    <span class="symbol">e</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

;; JavaScript unfortunately allows you to throw anything. You can handle
;; this in ClojureScript with the following.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">try</span>
  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">throw</span> <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">js/Error.</span> <span class="string">"Oops"</span><span class="delimiter rainbow-2">)</span></span><span class="delimiter rainbow-1">)</span></span>
  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">catch</span> <span class="keyword">:default</span> <span class="symbol">e</span>
    <span class="symbol">e</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

;; Catches are optional. You can also use multiple forms to handle different types of errors.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">try</span>
  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">throw</span> <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">js/Error.</span> <span class="string">"Oops"</span><span class="delimiter rainbow-2">)</span></span><span class="delimiter rainbow-1">)</span></span>
  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">catch</span> <span class="symbol">js/Error</span> <span class="symbol">e</span>
    <span class="symbol">e</span><span class="delimiter rainbow-1">)</span></span>
  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">catch</span> <span class="symbol">Error</span> <span class="symbol">e</span>
    <span class="symbol">e</span><span class="delimiter rainbow-1">)</span></span>
  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">finally</span>
     <span class="string">"Cleanup here"</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>


;; Mutation
;; ============================================================================

;; Atoms
;; ----------------------------------------------------------------------------

;; A little bit of mutability goes a long way. ClojureScript does not offer
;; any traditional mutable data structures, however it does support identities
;; that can evolve over time via `atom`.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">def</span> <span class="symbol">x</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">atom</span> <span class="number">1</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

;; You can dereference the value of an atom with `@`.

@<span class="symbol">x</span>

;; This is equivalent to calling `deref`.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">deref</span> <span class="symbol">x</span><span class="delimiter rainbow-0">)</span></span>

;; If you want to change the value of an atom you can use `reset!` which returns
;; the new value. It's idiomatic to add the bang char `!` at the end of function
;; names mutating objects.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">reset!</span> <span class="symbol">x</span> <span class="number">2</span><span class="delimiter rainbow-0">)</span></span>

<span class="symbol">x</span>

@<span class="symbol">x</span>

;; swap!
;; ------------------------------------------------------------------------------

;; If you want to change the value of an atom on the basis of its current value,
;; you can use `swap!`. In its simplest form, `swap!` accepts as a first argument
;; the atom itself and as a second argument an updating function of one argument
;; which will be instantiated with the current value of the atom. `swap!` returns
;; the new value of the atom.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">swap!</span> <span class="symbol">x</span> <span class="symbol">inc</span><span class="delimiter rainbow-0">)</span></span>

<span class="symbol">x</span>

@<span class="symbol">x</span>

;; If your updating function needs extra arguments to calculate the new value, you
;; have to pass them as extra arguments to `swap!` after the updating function
;; itself.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">swap!</span> <span class="symbol">x</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">fn</span> <span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="symbol">old</span> <span class="symbol">extra-arg</span><span class="delimiter rainbow-2">]</span></span>
           <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">+</span> <span class="symbol">old</span> <span class="symbol">extra-arg</span><span class="delimiter rainbow-2">)</span></span><span class="delimiter rainbow-1">)</span></span> <span class="number">39</span><span class="delimiter rainbow-0">)</span></span>

<span class="symbol">x</span>

@<span class="symbol">x</span>

;; As usual when anonymous functions are simple enough, it's idiomatic to use
;; the condensed form.

;(swap! x #(- %1 %2) 42)

<span class="symbol">x</span>

@<span class="symbol">x</span>

;; Note that the updating function has to be free of side-effects because a
;; waiting writer could call it more than once in a spin loop.


;; set!
;; ----------------------------------------------------------------------------

;; Sometimes you need to mutate existing JavaScript objects. For this you
;; have `set!`.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">def</span> <span class="symbol">c</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">.createElement</span> <span class="symbol">js/document</span> <span class="string">"canvas"</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>
<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">def</span> <span class="symbol">ctxt</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">.getContext</span> <span class="symbol">c</span> <span class="string">"2d"</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

;; We can use property access with `set!` to change the fill color of a
;; a canvas rendering context.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">set!</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">.-fillColor</span> <span class="symbol">ctxt</span><span class="delimiter rainbow-1">)</span></span> <span class="string">"#ffffff"</span><span class="delimiter rainbow-0">)</span></span>


;; The ClojureScript Standard Library
;; ============================================================================

;; The ClojureScript standard library largely mirrors the Clojure standard
;; library with the exception of functionality that assumes a multithreaded
;; environment, first class namespaces, and Java numerics.

;; Here are some highlights and patterns that newcomers to ClojureScript might
;; find useful. Remember you can type Control-Shift-D at anytime to bring up
;; the documentation panel to see what any of these function do.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">apply</span> <span class="symbol">str</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">interpose</span> <span class="string">", "</span> <span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="string">"Bob"</span> <span class="string">"Mary"</span> <span class="string">"George"</span><span class="delimiter rainbow-2">]</span></span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">juxt</span> <span class="keyword">:first</span> <span class="keyword">:last</span><span class="delimiter rainbow-1">)</span></span> <span class="collection map"><span class="delimiter rainbow-1">{</span><span class="keyword">:first</span> <span class="string">"Bob"</span> <span class="keyword">:last</span> <span class="string">"Smith"</span><span class="delimiter rainbow-1">}</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">def</span> <span class="symbol">people</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="collection map"><span class="delimiter rainbow-2">{</span><span class="keyword">:first</span> <span class="string">"John"</span> <span class="keyword">:last</span> <span class="string">"McCarthy"</span><span class="delimiter rainbow-2">}</span></span>
             <span class="collection map"><span class="delimiter rainbow-2">{</span><span class="keyword">:first</span> <span class="string">"Alan"</span> <span class="keyword">:last</span> <span class="string">"Kay"</span><span class="delimiter rainbow-2">}</span></span>
             <span class="collection map"><span class="delimiter rainbow-2">{</span><span class="keyword">:first</span> <span class="string">"Joseph"</span> <span class="keyword">:last</span> <span class="string">"Licklider"</span><span class="delimiter rainbow-2">}</span></span>
             <span class="collection map"><span class="delimiter rainbow-2">{</span><span class="keyword">:first</span> <span class="string">"Robin"</span> <span class="keyword">:last</span> <span class="string">"Milner"</span><span class="delimiter rainbow-2">}</span></span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">map</span> <span class="keyword">:first</span> <span class="symbol">people</span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">take</span> <span class="number">5</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">repeat</span> <span class="string">"red"</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">take</span> <span class="number">5</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">repeat</span> <span class="string">"blue"</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">take</span> <span class="number">5</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">interleave</span> <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">repeat</span> <span class="string">"red"</span><span class="delimiter rainbow-2">)</span></span> <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">repeat</span> <span class="string">"blue"</span><span class="delimiter rainbow-2">)</span></span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">take</span> <span class="number">10</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">cycle</span> <span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="string">"red"</span> <span class="string">"white"</span> <span class="string">"blue"</span><span class="delimiter rainbow-2">]</span></span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">partition</span> <span class="number">2</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="keyword">:a</span> <span class="number">1</span> <span class="keyword">:b</span> <span class="number">2</span> <span class="keyword">:c</span> <span class="number">3</span> <span class="keyword">:d</span> <span class="number">4</span> <span class="keyword">:e</span> <span class="number">5</span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">partition</span> <span class="number">2</span> <span class="number">1</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="keyword">:a</span> <span class="number">1</span> <span class="keyword">:b</span> <span class="number">2</span> <span class="keyword">:c</span> <span class="number">3</span> <span class="keyword">:d</span> <span class="number">4</span> <span class="keyword">:e</span> <span class="number">5</span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">take-while</span> <span class="collection list"><span class="delimiter rainbow-1">#</span><span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">&lt;</span> % <span class="number">5</span><span class="delimiter rainbow-2"><span class="delimiter">)</span></span></span></span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">range</span> <span class="number">10</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">drop-while</span> <span class="collection list"><span class="delimiter rainbow-1">#</span><span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">&lt;</span> % <span class="number">5</span><span class="delimiter rainbow-2"><span class="delimiter">)</span></span></span></span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">range</span> <span class="number">10</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>


;; Protocols
;; ============================================================================

;; The ClojureScript language is constructed on a rich set of protocols. The
;; same uniformity provided by ClojureScript collections can be extended to
;; your own types or even types that you do not control!

;; A lot of the uniform power we saw early was because the ClojureScript
;; collections are implemented in terms of protocols. Collections can be
;; coerced into sequences because they implement ISeqable. You can use `get`
;; on vectors and maps because they implement ILookup.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">get</span> <span class="collection map"><span class="delimiter rainbow-1">{</span><span class="keyword">:foo</span> <span class="string">"bar"</span><span class="delimiter rainbow-1">}</span></span> <span class="keyword">:foo</span><span class="delimiter rainbow-0">)</span></span>
<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">get</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="keyword">:cat</span> <span class="keyword">:bird</span> <span class="keyword">:dog</span><span class="delimiter rainbow-1">]</span></span> <span class="number">1</span><span class="delimiter rainbow-0">)</span></span>

;; Map destructuring actually desugars into `get` calls. That means if you extend
;; your type to ILookup it will also support map destructuring!


;; extend-type
;; ----------------------------------------------------------------------------

;; ClojureScript supports custom extension to types that avoid many of the
;; pitfalls that you encounter in other languages. For example imagine we have
;; some awesome polymorphic functionality in mind.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">defprotocol</span> <span class="symbol">MyProtocol</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">awesome</span> <span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="symbol">this</span><span class="delimiter rainbow-2">]</span></span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

;; It's idiomatic to name the first argument of a protocol's functions
;; as `this` which reminds you that it is the argument used by
;; ClojureScript to dispatch the right function implementation on the
;; basis of the type of the value of `this`

;; Now imagine we want JavaScript strings to participate. We can do this
;; simply.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">extend-type</span> <span class="symbol">string</span>
  <span class="symbol">MyProtocol</span>
  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">awesome</span> <span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="symbol">this</span><span class="delimiter rainbow-2">]</span></span> <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">vector</span> <span class="symbol">this</span> <span class="string">"Totally awesome!"</span><span class="delimiter rainbow-2">)</span></span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">awesome</span> <span class="string">"Is this awesome?"</span><span class="delimiter rainbow-0">)</span></span>


;; extend-protocol
;; ----------------------------------------------------------------------------

;; Sometimes you want to extend several types to a protocol at once. You can
;; use extend-protocol for this. extend-protocol simply desugars into multiple
;; extend-type forms.

;; As said while learning about `let` special form, when we're not
;; interested in the value of an argument it's idiomatic to use the
;; underscore as a placeholder like above.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">extend-protocol</span> <span class="symbol">MyProtocol</span>
  <span class="symbol">js/Date</span>
  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">awesome</span> <span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="symbol">_</span><span class="delimiter rainbow-2">]</span></span> <span class="string">"Having an awesome time!"</span><span class="delimiter rainbow-1">)</span></span>
  <span class="symbol">number</span>
  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">awesome</span> <span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="symbol">_</span><span class="delimiter rainbow-2">]</span></span> <span class="string">"I'm an awesome number!"</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">awesome</span> #inst <span class="string">"2014"</span><span class="delimiter rainbow-0">)</span></span>
<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">awesome</span> <span class="number">5</span><span class="delimiter rainbow-0">)</span></span>


;; reify
;; ----------------------------------------------------------------------------

;; Sometimes it's useful to make an anonymous type which implements various
;; protocols.

;; For example say we want a JavaScript object to support ILookup. Now we don't
;; want to blindly `extend-type object`, that would pollute the behavior of plain
;; JavaScript objects for everyone.

;; Instead we can provide a helper function that takes an object and returns
;; something that provides this functionality.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">defn</span> <span class="symbol">-&gt;lookup</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="symbol">obj</span><span class="delimiter rainbow-1">]</span></span>
  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">reify</span>
    <span class="symbol">ILookup</span>
    <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">-lookup</span> <span class="collection vector"><span class="delimiter rainbow-3">[</span><span class="symbol">this</span> <span class="symbol">k</span><span class="delimiter rainbow-3">]</span></span>
      <span class="collection list"><span class="delimiter rainbow-3">(</span><span class="symbol">-lookup</span> <span class="symbol">this</span> <span class="symbol">k</span> <span class="nil">nil</span><span class="delimiter rainbow-3">)</span></span><span class="delimiter rainbow-2">)</span></span>
    <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">-lookup</span> <span class="collection vector"><span class="delimiter rainbow-3">[</span><span class="symbol">this</span> <span class="symbol">k</span> <span class="symbol">not-found</span><span class="delimiter rainbow-3">]</span></span>
      <span class="collection list"><span class="delimiter rainbow-3">(</span><span class="symbol">let</span> <span class="collection vector"><span class="delimiter rainbow-4">[</span><span class="symbol">k</span> <span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">name</span> <span class="symbol">k</span><span class="delimiter rainbow-0">)</span></span><span class="delimiter rainbow-4">]</span></span>
        <span class="collection list"><span class="delimiter rainbow-4">(</span><span class="symbol">if</span> <span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">.hasOwnProperty</span> <span class="symbol">obj</span> <span class="symbol">k</span><span class="delimiter rainbow-0">)</span></span>
          <span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">aget</span> <span class="symbol">obj</span> <span class="symbol">k</span><span class="delimiter rainbow-0">)</span></span>
          <span class="symbol">not-found</span><span class="delimiter rainbow-4">)</span></span><span class="delimiter rainbow-3">)</span></span><span class="delimiter rainbow-2">)</span></span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

;; We can then selectively make JavaScript objects work with `get`.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">get</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">-&gt;lookup</span> #js <span class="collection map"><span class="delimiter rainbow-2">{</span><span class="string">"foo"</span> <span class="string">"bar"</span><span class="delimiter rainbow-2">}</span></span><span class="delimiter rainbow-1">)</span></span> <span class="keyword">:foo</span><span class="delimiter rainbow-0">)</span></span>

;; But this also means we get destructuring on JavaScript objects.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">def</span> <span class="symbol">some-object</span> #js <span class="collection map"><span class="delimiter rainbow-1">{</span><span class="string">"foo"</span> <span class="string">"bar"</span> <span class="string">"baz"</span> <span class="string">"woz"</span><span class="delimiter rainbow-1">}</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">let</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="collection map"><span class="delimiter rainbow-2">{</span><span class="keyword">:keys</span> <span class="collection vector"><span class="delimiter rainbow-3">[</span><span class="symbol">foo</span> <span class="symbol">baz</span><span class="delimiter rainbow-3">]</span></span><span class="delimiter rainbow-2">}</span></span> <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">-&gt;lookup</span> <span class="symbol">some-object</span><span class="delimiter rainbow-2">)</span></span><span class="delimiter rainbow-1">]</span></span>
  <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="symbol">foo</span> <span class="symbol">baz</span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>

;; Types &amp; Records
;; ============================================================================

;; deftype
;; ----------------------------------------------------------------------------

;; Sometimes a map will simply not suffice, in these cases you will want to
;; make your own custom type.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">deftype</span> <span class="symbol">Foo</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="symbol">a</span> <span class="symbol">b</span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>

;; It's idiomatic to use CamelCase to name a `deftype`. You can instantiate a
;; deftype instance using the same constructor pattern we've already discussed.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">Foo.</span> <span class="number">1</span> <span class="number">2</span><span class="delimiter rainbow-0">)</span></span>

;; You can access properties of a deftype instance using property access
;; syntax.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">.-a</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">Foo.</span> <span class="number">1</span> <span class="number">2</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

;; You can implement protocol methods on a deftype. Note that the first
;; argument to any deftype or defrecord method is the instance itself.
;; The dash in `-count` has no special meaning. It's just a convention for
;; the core ClojureScript protocols. You need not adopt it.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">deftype</span> <span class="symbol">Foo</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="symbol">a</span> <span class="symbol">b</span><span class="delimiter rainbow-1">]</span></span>
  <span class="symbol">ICounted</span>
  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">-count</span> <span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="symbol">this</span><span class="delimiter rainbow-2">]</span></span> <span class="number">2</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">count</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">Foo.</span> <span class="number">1</span> <span class="number">2</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

;; Sometimes it's useful to implement methods directly on the deftype.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">deftype</span> <span class="symbol">Foo</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="symbol">a</span> <span class="symbol">b</span><span class="delimiter rainbow-1">]</span></span>
  <span class="symbol">Object</span>
  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">toString</span> <span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="symbol">this</span><span class="delimiter rainbow-2">]</span></span> <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">str</span> <span class="symbol">a</span> <span class="string">", "</span> <span class="symbol">b</span><span class="delimiter rainbow-2">)</span></span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">.toString</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">Foo.</span> <span class="number">1</span> <span class="number">2</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

;; deftype fields are immutable unless specified. The following will not compile.
;; (To prove it to yourself, highlight and evaluate the `deftype` form below.)

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">comment</span>

  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">deftype</span> <span class="symbol">Foo</span> <span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="symbol">a</span> ^:mutable <span class="symbol">b</span><span class="delimiter rainbow-2">]</span></span>
    <span class="symbol">Object</span>
    <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">setA</span> <span class="collection vector"><span class="delimiter rainbow-3">[</span><span class="symbol">this</span> <span class="symbol">val</span><span class="delimiter rainbow-3">]</span></span> <span class="collection list"><span class="delimiter rainbow-3">(</span><span class="symbol">set!</span> <span class="symbol">a</span> <span class="symbol">val</span><span class="delimiter rainbow-3">)</span></span><span class="delimiter rainbow-2">)</span></span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

  

;; The following will compile.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">deftype</span> <span class="symbol">Foo</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="symbol">a</span> ^:mutable <span class="symbol">b</span><span class="delimiter rainbow-1">]</span></span>
  <span class="symbol">Object</span>
  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">setB</span> <span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="symbol">this</span> <span class="symbol">val</span><span class="delimiter rainbow-2">]</span></span> <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">set!</span> <span class="symbol">b</span> <span class="symbol">val</span><span class="delimiter rainbow-2">)</span></span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>


;; defrecord
;; ----------------------------------------------------------------------------

;; `deftype` doesn't provide much out of the box. Often what you want to do is
;; have a domain object that acts more or less like a map. This is what
;; `defrecord` is for.

;; Like `deftype`, it's idiomatic to use CamelCase to name a `defrecord`.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">defrecord</span> <span class="symbol">Person</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="symbol">first</span> <span class="symbol">last</span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>

;; You can construct an instance in the usual way.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">Person.</span> <span class="string">"Bob"</span> <span class="string">"Smith"</span><span class="delimiter rainbow-0">)</span></span>

;; Or you can use the provided constructors.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">-&gt;Person</span> <span class="string">"Bob"</span> <span class="string">"Smith"</span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">map-&gt;Person</span> <span class="collection map"><span class="delimiter rainbow-1">{</span><span class="keyword">:first</span> <span class="string">"Bob"</span> <span class="keyword">:last</span> <span class="string">"Smith"</span><span class="delimiter rainbow-1">}</span></span><span class="delimiter rainbow-0">)</span></span>

;; It's considered idiomatic (and recommended) to define a factory function
;; which returns the created instance of a defrecord/deftype. It's idiomatic to use
;; dash-case for factories names.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">defn</span> <span class="symbol">person</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="symbol">first</span> <span class="symbol">last</span><span class="delimiter rainbow-1">]</span></span>
  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">-&gt;Person</span> <span class="symbol">first</span> <span class="symbol">last</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

;; records work like maps

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">seq</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">person</span> <span class="string">"Bob"</span> <span class="string">"Smith"</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="keyword">:first</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">person</span> <span class="string">"Bob"</span> <span class="string">"Smith"</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">keys</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">person</span> <span class="string">"Bob"</span> <span class="string">"Smith"</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">vals</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">person</span> <span class="string">"Bob"</span> <span class="string">"Smith"</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

;; both deftype and defrecord are open to dynamic extensions (i.e. open class)

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">keys</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">assoc</span> <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">person</span> <span class="string">"Bob"</span> <span class="string">"Smith"</span><span class="delimiter rainbow-2">)</span></span> <span class="keyword">:age</span> <span class="number">18</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>


;; Records &amp; Protocols
;; ----------------------------------------------------------------------------

;; You can extend a defrecord to satisfy a protocol as you do with deftype.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">extend-type</span> <span class="symbol">Person</span>
  <span class="symbol">MyProtocol</span>
  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">awesome</span> <span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="symbol">this</span><span class="delimiter rainbow-2">]</span></span>
    <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">str</span> <span class="collection list"><span class="delimiter rainbow-3">(</span><span class="keyword">:last</span> <span class="symbol">this</span><span class="delimiter rainbow-3">)</span></span> <span class="string">", "</span> <span class="collection list"><span class="delimiter rainbow-3">(</span><span class="keyword">:first</span> <span class="symbol">this</span><span class="delimiter rainbow-3">)</span></span><span class="delimiter rainbow-2">)</span></span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">awesome</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">person</span> <span class="string">"Bob"</span> <span class="string">"Smith"</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">satisfies?</span> <span class="symbol">MyProtocol</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">person</span> <span class="string">"Bob"</span> <span class="string">"Smith"</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

;; Or you can extend a protocol on a defrecord.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">extend-protocol</span> <span class="symbol">MyProtocol</span>
  <span class="symbol">Person</span>
  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">awesome</span> <span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="symbol">this</span><span class="delimiter rainbow-2">]</span></span>
    <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">str</span> <span class="collection list"><span class="delimiter rainbow-3">(</span><span class="keyword">:last</span> <span class="symbol">this</span><span class="delimiter rainbow-3">)</span></span> <span class="string">", "</span> <span class="collection list"><span class="delimiter rainbow-3">(</span><span class="keyword">:first</span> <span class="symbol">this</span><span class="delimiter rainbow-3">)</span></span><span class="delimiter rainbow-2">)</span></span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">awesome</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">person</span> <span class="string">"Bob"</span> <span class="string">"Smith"</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">satisfies?</span> <span class="symbol">MyProtocol</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">person</span> <span class="string">"Bob"</span> <span class="string">"Smith"</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

;; If you need a more sophisticated form of polymorphism consider multimethods.

;; If you mix types/records with protocols you are modeling your problem with an
;; object oriented approach, which is sometimes useful.

;; Note ClojureScript does not offer a direct form of inheritance. Instead,
;; reuse/extension by composition is encouraged. It's best to avoid
;; deftype/defrecord and model your problem with plain maps. You can easily
;; switch to records later on down the line.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">defrecord</span> <span class="symbol">Contact</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="symbol">person</span> <span class="symbol">email</span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>

;; Even if it's not required, remember to define a factory function to create
;; instances of the new Contact record type by internally calling the factory
;; function for the Person record type.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">defn</span> <span class="symbol">contact</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="symbol">first</span> <span class="symbol">last</span> <span class="symbol">email</span><span class="delimiter rainbow-1">]</span></span>
  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">-&gt;Contact</span> <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">person</span> <span class="symbol">first</span> <span class="symbol">last</span><span class="delimiter rainbow-2">)</span></span> <span class="symbol">email</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">contact</span> <span class="string">"Bob"</span> <span class="string">"Smith"</span> <span class="string">"bob.smith@acme.com"</span><span class="delimiter rainbow-0">)</span></span>

;; And extend the protocol on defrecord as well.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">extend-protocol</span> <span class="symbol">MyProtocol</span>
  <span class="symbol">Contact</span>
  <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">awesome</span> <span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="symbol">this</span><span class="delimiter rainbow-2">]</span></span>
    <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">str</span> <span class="collection list"><span class="delimiter rainbow-3">(</span><span class="symbol">awesome</span> <span class="collection list"><span class="delimiter rainbow-4">(</span><span class="keyword">:person</span> <span class="symbol">this</span><span class="delimiter rainbow-4">)</span></span><span class="delimiter rainbow-3">)</span></span> <span class="string">", "</span> <span class="collection list"><span class="delimiter rainbow-3">(</span><span class="keyword">:email</span> <span class="symbol">this</span><span class="delimiter rainbow-3">)</span></span><span class="delimiter rainbow-2">)</span></span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">awesome</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">contact</span> <span class="string">"Bob"</span> <span class="string">"Smith"</span> <span class="string">"bob.smith@acme.com"</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

;; To change the value of a nested key you use 'assoc-in', like with maps.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">assoc-in</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">contact</span> <span class="string">"Bob"</span> <span class="string">"Smith"</span> <span class="string">"bob.smith@acme.com"</span><span class="delimiter rainbow-1">)</span></span>
          <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="keyword">:person</span> <span class="keyword">:first</span><span class="delimiter rainbow-1">]</span></span> <span class="string">"Robert"</span><span class="delimiter rainbow-0">)</span></span>

;; If you need to use the previous value of a nested field for calculating the
;; new one, you can use 'update-in', like with maps.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">update-in</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">contact</span> <span class="string">"Bob"</span> <span class="string">"Smith"</span> <span class="string">"bob.smith@acme.com"</span><span class="delimiter rainbow-1">)</span></span>
           <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="keyword">:person</span> <span class="keyword">:first</span><span class="delimiter rainbow-1">]</span></span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">fn</span> <span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="symbol">s1</span> <span class="symbol">s2</span><span class="delimiter rainbow-2">]</span></span> <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">string/replace</span> <span class="symbol">s1</span> <span class="string">#"Bob"</span> <span class="symbol">s2</span><span class="delimiter rainbow-2">)</span></span><span class="delimiter rainbow-1">)</span></span> <span class="string">"Robert"</span><span class="delimiter rainbow-0">)</span></span>

;; As said, the main difference with the majority of OO languages is that your
;; instances of deftypes/defrecords are immutable.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">def</span> <span class="symbol">bob</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">contact</span> <span class="string">"Bob"</span> <span class="string">"Smith"</span> <span class="string">"bob.smith@acme.com"</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">update-in</span> <span class="symbol">bob</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="keyword">:person</span> <span class="keyword">:first</span><span class="delimiter rainbow-1">]</span></span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">fn</span> <span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="symbol">s1</span> <span class="symbol">s2</span><span class="delimiter rainbow-2">]</span></span> <span class="collection list"><span class="delimiter rainbow-2">(</span><span class="symbol">string/replace</span> <span class="symbol">s1</span> <span class="string">#"Bob"</span> <span class="symbol">s2</span><span class="delimiter rainbow-2">)</span></span><span class="delimiter rainbow-1">)</span></span> <span class="string">"Robert"</span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">get-in</span> <span class="symbol">bob</span> <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="keyword">:person</span> <span class="keyword">:first</span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>


;; JavaScript Interop
;; ============================================================================

;; Property Access
;; ----------------------------------------------------------------------------

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">def</span> <span class="symbol">a-date</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">js/Date.</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

;; You can access properties with the `.-` property access syntax.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">.-getSeconds</span> <span class="symbol">a-date</span><span class="delimiter rainbow-0">)</span></span>


;; Method Calls
;; ----------------------------------------------------------------------------

;; Methods can be invoked with the `.` syntax.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">.getSeconds</span> <span class="symbol">a-date</span><span class="delimiter rainbow-0">)</span></span>

;; The above desugars into the following.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">.</span> <span class="symbol">a-date</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">getSeconds</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>

;; For example, you can write a `console.log` call like so.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">.</span> <span class="symbol">js/console</span> <span class="collection list"><span class="delimiter rainbow-1">(</span><span class="symbol">log</span> <span class="string">"Interop!"</span><span class="delimiter rainbow-1">)</span></span><span class="delimiter rainbow-0">)</span></span>


;; Primitive Array Operations
;; ----------------------------------------------------------------------------

;; When writing performance sensitive code, sometimes dealing with mutable
;; arrays is unavoidable. ClojureScript provides a variety of functions for
;; creating and manipulating JavaScript arrays.

;; You can make an array of specific size with `make-array`

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">make-array</span> <span class="number">32</span><span class="delimiter rainbow-0">)</span></span>

;; You can access an element of an array with `aget`.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">aget</span> #js <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="string">"one"</span> <span class="string">"two"</span> <span class="string">"three"</span><span class="delimiter rainbow-1">]</span></span> <span class="number">1</span><span class="delimiter rainbow-0">)</span></span>

;; You can access nested arrays with `aget`.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">aget</span> #js <span class="collection vector"><span class="delimiter rainbow-1">[</span>#js <span class="collection vector"><span class="delimiter rainbow-2">[</span><span class="string">"one"</span> <span class="string">"two"</span> <span class="string">"three"</span><span class="delimiter rainbow-2">]</span></span><span class="delimiter rainbow-1">]</span></span> <span class="number">0</span> <span class="number">1</span><span class="delimiter rainbow-0">)</span></span>

;; You can set the contents of an array with aset.

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">def</span> <span class="symbol">yucky-stuff</span> #js <span class="collection vector"><span class="delimiter rainbow-1">[</span><span class="number">1</span> <span class="number">2</span> <span class="number">3</span><span class="delimiter rainbow-1">]</span></span><span class="delimiter rainbow-0">)</span></span>

<span class="collection list"><span class="delimiter rainbow-0">(</span><span class="symbol">aset</span> <span class="symbol">yucky-stuff</span> <span class="number">1</span> <span class="number">4</span><span class="delimiter rainbow-0">)</span></span>

<span class="symbol">yucky-stuff</span>
</div>
	</div>
	<script type="text/javascript" src="https://oakes.github.io/paren-soup/paren-soup.js"></script>
	<script type="text/javascript">
		paren_soup.core.init_all();
	</script>
	

<div class="nsc-panel nsc-panel-compact nsc-hide">
    <div class="nsc-panel-move"></div>
    <div class="nsc-panel-tooltip">
        <div class="nsc-panel-tooltip-layout" layout="row" layout-align="start center">CTRL+V to toggle the panel</div>
    </div>

    <div class="nsc-panel-layout" flex="" layout="row" layout-align="start center">
        <div class="nsc-panel-groups" flex="" layout="row" layout-align="start start">

            <!-- group -->
            <div class="nsc-panel-group" flex="none" layout="row" layout-align="start start">
                <div class="nsc-panel-button separated active">
                    <div class="nsc-panel-select" flex="" layout="row">
                        <div class="nsc-panel-text nsc-noselect" flex="" layout="row" layout-align="center center">
                            <span class="nsc-icon nsc-icon-cursor-normal" data-i18n="videoPanelSimpleCursor" data-event="nimbus-editor-active-tools" data-event-param="cursorRing">&nbsp;</span>
                        </div>
                        <div class="nsc-panel-trigger">
                            <span class="nsc-icon nsc-icon-arrow">&nbsp;</span>
                        </div>
                    </div>
                    <div class="nsc-panel-dropdown to-top">
                        <ul flex="" layout="row" layout-align="start center">
                            <li class="nsc-panel-dropdown-icon" flex="" layout="row" layout-align="start center">
                                <span class="nsc-icon nsc-icon-cursor-shade" data-i18n="videoPanelFocusMouse" data-event="nimbus-editor-active-tools" data-event-param="cursorShadow">&nbsp;</span>
                            </li>
                            <li class="nsc-panel-dropdown-icon" flex="" layout="row" layout-align="start center">
                                <span class="nsc-icon nsc-icon-cursor-circle" data-i18n="videoPanelAnimatedCursor" data-event="nimbus-editor-active-tools" data-event-param="cursorRing">&nbsp;</span>
                            </li>
                            <!--<li class="nsc-panel-dropdown-icon " flex layout="row" layout-align="start center">-->
                            <!--<span class="nsc-icon nsc-icon-cursor-tail"></span>-->
                            <!--</li>-->
                            <!--<li class="nsc-panel-dropdown-icon " flex layout="row" layout-align="start center">-->
                            <!--<span class="nsc-icon nsc-icon-cursor-long"></span>-->
                            <!--</li>-->
                            <li class="nsc-panel-dropdown-icon" flex="" layout="row" layout-align="start center">
                                <span class="nsc-icon nsc-icon-cursor-normal" data-i18n="videoPanelSimpleCursor" data-event="nimbus-editor-active-tools" data-event-param="cursorDefault">&nbsp;</span>
                            </li>
                            <!--<li class="nsc-panel-dropdown-icon" flex layout="row" layout-align="start center">-->
                            <!--<span class="nsc-icon nsc-icon-cursor-none" data-event="nimbus-editor-active-tools" data-event-param="cursorNone"></span>-->
                            <!--</li>-->
                        </ul>
                    </div>
                </div>
            </div>
            <!-- /group -->

            <!-- group -->
            <div class="nsc-panel-group" flex="none" layout="row" layout-align="start start">
                <button class="nsc-panel-button" type="button">
                    <span class="nsc-icon nsc-icon-pen" data-i18n="videoPanelPen" data-event="nimbus-editor-active-tools" data-event-param="pen">&nbsp;</span>
                </button>
                <button class="nsc-panel-button" type="button">
                    <span class="nsc-icon nsc-icon-arrow-line" data-i18n="videoPanelArrow" data-event="nimbus-editor-active-tools" data-event-param="arrow">&nbsp;</span>
                </button>
                <button class="nsc-panel-button" type="button">
                    <span class="nsc-icon nsc-icon-square" data-i18n="videoPanelSquare" data-event="nimbus-editor-active-tools" data-event-param="square">&nbsp;</span>
                </button>
                <div class="nsc-panel-button separated">
                    <div class="nsc-panel-select" flex="" layout="row">
                        <div class="nsc-panel-text nsc-noselect" flex="" layout="row" layout-align="center center">
                            <span class="nsc-icon nsc-icon-attention" data-i18n="videoPanelMark" data-event="nimbus-editor-active-tools" data-event-param="notifRed">&nbsp;</span>
                        </div>
                        <div class="nsc-panel-trigger">
                            <span class="nsc-icon nsc-icon-arrow">&nbsp;</span>
                        </div>
                    </div>
                    <div class="nsc-panel-dropdown to-top">
                        <ul flex="" layout="row" layout-align="start center">
                            <li class="nsc-panel-dropdown-icon" flex="" layout="row" layout-align="start center">
                                <span class="nsc-icon nsc-icon-attention" data-i18n="videoPanelMark" data-event="nimbus-editor-active-tools" data-event-param="notifRed">&nbsp;</span>
                            </li>
                            <li class="nsc-panel-dropdown-icon" flex="" layout="row" layout-align="start center">
                                <span class="nsc-icon nsc-icon-question" data-i18n="videoPanelQuestion" data-event="nimbus-editor-active-tools" data-event-param="notifBlue">&nbsp;</span>
                            </li>
                            <li class="nsc-panel-dropdown-icon" flex="" layout="row" layout-align="start center">
                                <span class="nsc-icon nsc-icon-done" data-i18n="videoPanelCheckmark" data-event="nimbus-editor-active-tools" data-event-param="notifGreen">&nbsp;</span>
                            </li>
                        </ul>
                    </div>
                </div>
                <div class="nsc-panel-button assembled">
                    <div class="nsc-panel-select" flex="" layout="row">
                        <div class="nsc-panel-text nsc-noselect" flex="" layout="row" layout-align="center center">
							<span class="nsc-icon nsc-icon-fill-none nsc-panel-icon-fill">
								<span class="nsc-panel-icon-fill-inner" id="nsc_panel_button_colors" style="background:#00FF00;" data-event="nimbus-editor-active-color" data-event-param="#00FF00">&nbsp;</span>
							</span>
                        </div>
                        <div class="nsc-panel-trigger">
                            <span class="nsc-icon nsc-icon-arrow">&nbsp;</span>
                        </div>
                    </div>
                    <div class="nsc-panel-dropdown">
                        <div class="nsc-panel-drop-area">
                            <div class="nsc-panel-colors">

                                <!-- picked -->
                                <div class="nsc-colors-picked">
                                    <div class="nsc-colors-picked-layout" flex="" layout="row" layout-align="start start" layout-wrap="">
                                        <div class="nsc-colors-picked-item">
                                            <button class="nsc-colors-picked-button" type="button" data-event="nimbus-editor-active-color" data-event-param="#000000">
                                                <span class="nsc-colors-picked-button-inner" style="background: #000000;">&nbsp;</span>
                                            </button>
                                        </div>
                                        <div class="nsc-colors-picked-item">
                                            <button class="nsc-colors-picked-button" type="button" data-event="nimbus-editor-active-color" data-event-param="#0000FF">
                                                <span class="nsc-colors-picked-button-inner" style="background: #0000FF;">&nbsp;</span>
                                            </button>
                                        </div>
                                        <div class="nsc-colors-picked-item">
                                            <button class="nsc-colors-picked-button" type="button" data-event="nimbus-editor-active-color" data-event-param="#FF00FF">
                                                <span class="nsc-colors-picked-button-inner" style="background: #FF00FF;">&nbsp;</span>
                                            </button>
                                        </div>
                                        <div class="nsc-colors-picked-item">
                                            <button class="nsc-colors-picked-button" type="button" data-event="nimbus-editor-active-color" data-event-param="#00FFFF">
                                                <span class="nsc-colors-picked-button-inner" style="background: #00FFFF;">&nbsp;</span>
                                            </button>
                                        </div>
                                        <div class="nsc-colors-picked-item">
                                            <button class="nsc-colors-picked-button" type="button" data-event="nimbus-editor-active-color" data-event-param="#00FF00">
                                                <span class="nsc-colors-picked-button-inner" style="background: #00FF00;">&nbsp;</span>
                                            </button>
                                        </div>
                                        <div class="nsc-colors-picked-item">
                                            <button class="nsc-colors-picked-button" type="button" data-event="nimbus-editor-active-color" data-event-param="#FFFF00">
                                                <span class="nsc-colors-picked-button-inner" style="background: #FFFF00;">&nbsp;</span>
                                            </button>
                                        </div>
                                        <div class="nsc-colors-picked-item">
                                            <button class="nsc-colors-picked-button" type="button" data-event="nimbus-editor-active-color" data-event-param="#FF0000">
                                                <span class="nsc-colors-picked-button-inner" style="background: #FF0000;">&nbsp;</span>
                                            </button>
                                        </div>
                                        <div class="nsc-colors-picked-item">
                                            <button class="nsc-colors-picked-button" type="button" data-event="nimbus-editor-active-color" data-event-param="#FFFFFF">
                                                <span class="nsc-colors-picked-button-inner" style="background: #FFFFFF;">&nbsp;</span>
                                            </button>
                                        </div>
                                        <!--<div class="nsc-colors-picked-item">-->
                                        <!--<button class="nsc-colors-picked-button custom" type="button"> -->
                                        <!--<i class="nsc-icon ic-color-custom"></i> -->
                                        <!--</button>-->
                                        <!--</div>-->
                                    </div>
                                </div>
                                <!-- /picked -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- /group -->

            <!-- group -->
            <div class="nsc-panel-group" flex="none" layout="row" layout-align="start start">
                <button class="nsc-panel-button nsc-hide" type="button">
                    <span class="nsc-icon nsc-icon-eraser" data-i18n="videoPanelClear" data-event="nimbus-editor-active-tools" data-event-param="clear">&nbsp;</span>
                </button>
                <button class="nsc-panel-button" type="button">
                    <span class="nsc-icon nsc-icon-eraser-all" data-i18n="videoPanelClearAll" data-event="nimbus-editor-active-tools" data-event-param="clearAll">&nbsp;</span>
                </button>
                <button class="nsc-panel-button" type="button">
                    <span class="nsc-icon nsc-icon-webcam" data-i18n="videoPanelCamera" id="nimbus_web_camera_toggle">&nbsp;</span>
                </button>
            </div>
            <!-- /group -->
        </div>

        <div class="nsc-panel-actions" flex="none" layout="row" layout-align="start center">
            <button class="nsc-panel-button big" type="button" id="nsc_panel_button_play" style="display: none;">
                <span class="nsc-icon nsc-icon-play">&nbsp;</span>
            </button>
            <button class="nsc-panel-button big" type="button" id="nsc_panel_button_pause">
                <span class="nsc-icon nsc-icon-pause">&nbsp;</span>
            </button>
            <button class="nsc-panel-button big" type="button" id="nsc_panel_button_stop">
                <span class="nsc-icon nsc-icon-stop">&nbsp;</span>
            </button>
        </div>

        <!-- panel togglers -->
        <div class="nsc-panel-togglers" layout="row" layout-align="start center" flex="none">
            <button class="nsc-panel-toggle-button" type="button">
                <span class="nsc-icon nsc-icon-panel-close" data-i18n="videoPanelHideShowPanel">&nbsp;</span>
            </button>
        </div>
        <!-- /panel togglers -->

    </div>
</div>
<div class="nsc-video-editor nsc-hide events" style="width: 1329px; height: 26038px;"><canvas width="1329" height="26038" style="width: 1329px; height: 26038px; position: absolute; top: 0px; left: 0px; z-index: 0;"></canvas><canvas width="1329" height="26038" style="width: 1329px; height: 26038px; position: absolute; top: 0px; left: 0px; z-index: 1;"></canvas><canvas width="1329" height="26038" style="width: 1329px; height: 26038px; position: absolute; top: 0px; left: 0px; z-index: 2;"></canvas></div><div class="nsc-content-camera nsc-hide">
    <div class="nsc-content-camera-buttons" flex="none" layout="row" layout-align="start start">
        <button class="nsc-content-camera-button" type="button" id="nsc_video_camera_collapse" style="display: none">
            <span class="nsc-icon nsc-icon-panel-collapse"></span>
        </button>
        <button class="nsc-content-camera-button" type="button" id="nsc_video_camera_expand">
            <span class="nsc-icon nsc-icon-panel-expand"></span>
        </button>
        <button class="nsc-content-camera-button" type="button" id="nsc_video_camera_close">
            <span class="nsc-icon nsc-icon-panel-close"></span>
        </button>
    </div>
    <div class="nsc-content-camera-container">
        <div class="nsc-content-camera-shadow"></div>
    </div>
</div>
<iframe src="./paren-soup_files/saved_resource.html" style="display: none;"></iframe></body></html>